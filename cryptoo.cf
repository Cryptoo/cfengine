body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/local.cf",
              "cryptoo/system.cf",
              "cryptoo/config/config.cf",
              "cryptoo/config/directory_names.cf",
              "cryptoo/config/directory_groups.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/config/templates.cf"
            };

}

bundle common cryptoo

{

  vars:

    any::

      "bundles" slist => {
                            "cryptoo:cryptoo",
                            "cryptoo:config",
                            "cryptoo:directory_names",
                            "cryptoo:directory_groups",
                            "cryptoo:file_names",
                            "cryptoo:templates",
                            "cryptoo:local",
                            "cryptoo:cryptoo_system"
                         };

      "kernel_git"
        string => "git://github.com/cryptoo/kernel";

      "overlay_git"
        string => "git://github.com/cryptoo/overlay";

      "local_inputs"
        slist => lsdir("$(this.promise_dirname)/local/promises", ".*\.cf", "true");

    have_role::

      "configured_role"
        string => readfile("/$(file_names.crypoo_role)","128");

    need_role::

      "configured_role"
        string => "undefined";

    have_machine_names::

      "machine_names" data => readjson("/$(file_names.machine_names)", 1M);

    need_machine_names::

      "machine_names" data => readjson("/$(templates.template[machine_names])", 1M);

    have_site_config::

      "site_config" data => readjson("/$(file_names.site_config)", 1M),
        classes => default:if_ok("site_config_available");

    need_site_config::

      "site_config" data => readjson("/$(templates.template[site_config])", 1M),
        classes => default:if_ok("site_config_available");

    have_subnet_config::

      "subnet_config" data => readjson("/$(file_names.subnet_config)", 1M),
        classes => default:if_ok("subnet_config_available");

    role_undefined::

      "machine_number" string => "-1";

    role_master::

      "machine_number" string => "1";

  classes:

    any::

      "have_role"
        expression => fileexists("/$(file_names.crypoo_role)");

      "need_role"
        not => fileexists("/$(file_names.crypoo_role)");

      "have_machine_names"
        expression => fileexists("/$(file_names.machine_names)");

      "need_machine_names"
        not => fileexists("/$(file_names.machine_names)");

      "have_site_config"
        expression => fileexists("/$(file_names.site_config)");

      "need_site_config"
        not => fileexists("/$(file_names.site_config)");

      "have_subnet_config"
        expression => fileexists("/$(file_names.subnet_config)");

      "need_subnet_config"
        not => fileexists("/$(file_names.subnet_config)");

    have_role::

      "role_$(configured_role)"
        expression => "any";

    need_role::

      "role_undefined"
        expression => "any";

    have_role&(!role_master)::

      "local_role"
        expression => "any";

  reports:

    any::

      "My role is: $(configured_role)";
      "My number is: $(machine_number)";
      "My hostname is: $(machine_names[$(machine_number)])";

}
