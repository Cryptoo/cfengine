body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/local.cf",
              "cryptoo/system.cf",
              "cryptoo/config/config.cf",
              "cryptoo/config/directory_names.cf",
              "cryptoo/config/directory_groups.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/config/machines.cf",
              "cryptoo/config/templates.cf"
            };

}

bundle common cryptoo

{

  vars:

    any::

      "bundles"
        slist => {
                   "cryptoo:cryptoo",
                   "cryptoo:config",
                   "cryptoo:directory_names",
                   "cryptoo:directory_groups",
                   "cryptoo:file_names",
                   "cryptoo:templates",
                   "cryptoo:local",
                   "cryptoo:machines",
                   "cryptoo:cryptoo_system"
                 };

      "local_inputs"
        slist => lsdir("$(this.promise_dirname)/local/promises", ".*\.cf", "true");

    have_role::

      "configured_role"
        string => readfile("/$(cryptoo:file_names.cryptoo_role)","128");

    have_hostname::

      "configured_hostname"
        string => readfile("/$(cryptoo:file_names.cryptoo_hostname)","128");

    need_role::

      "configured_role"
        string => "undefined";

    have_machine_names::

      "machine_names"
        data => readjson("/$(cryptoo:file_names.machine_names)", 1M);

      "machine_names_idx"
        slist => getindices("machine_names");

      "machine_names_inverse[$(machine_names[$(machine_names_idx)])]"
        string => "$(machine_names_idx)";

    need_machine_names::

      "machine_names"
        data => readjson("/$(cryptoo:templates.template[machine_names])", 1M);

    have_site_config::

      "site_config"
        data => readjson("/$(cryptoo:file_names.site_config)", 1M),
        classes => default:if_ok("site_config_available");

    need_site_config::

      "site_config"
        data => readjson("/$(cryptoo:templates.template[site_config])", 1M),
        classes => default:if_ok("site_config_available");

    have_subnet_config::

      "subnet_config"
        data => readjson("/$(cryptoo:file_names.subnet_config)", 1M),
        classes => default:if_ok("subnet_config_available");

      "local_subnets"
        slist => {
                   "192.168.$(subnet_config[ispdmz]).0/24",
                   "192.168.$(subnet_config[tor]).0/24",
                   "192.168.$(subnet_config[i2p]).0/24",
                   "192.168.$(subnet_config[vpndmz]).0/24",
                   "192.168.$(subnet_config[lan]).0/24",
                 };

  classes:

    any::

      "have_role"
        expression => fileexists("/$(cryptoo:file_names.cryptoo_role)");

      "need_role"
        not => fileexists("/$(cryptoo:file_names.cryptoo_role)");

      "have_hostname"
        expression => fileexists("/$(cryptoo:file_names.cryptoo_hostname)");

      "have_machine_names"
        expression => fileexists("/$(cryptoo:file_names.machine_names)");

      "need_machine_names"
        not => fileexists("/$(cryptoo:file_names.machine_names)");

      "have_site_config"
        expression => fileexists("/$(cryptoo:file_names.site_config)");

      "need_site_config"
        not => fileexists("/$(cryptoo:file_names.site_config)");

      "have_subnet_config"
        expression => fileexists("/$(cryptoo:file_names.subnet_config)");

      "need_subnet_config"
        not => fileexists("/$(cryptoo:file_names.subnet_config)");

    have_role::

      "role_$(configured_role)"
        expression => "any";

    need_role::

      "role_undefined"
        expression => "any";

    role_master|role_desktop_host::

      "cryptoo_host"
        expression => "any";

}
