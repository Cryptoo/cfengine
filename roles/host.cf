body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/common/common.cf",
              "cryptoo/common/fstab.cf",
              "cryptoo/common/mounts.cf",
              "cryptoo/config/config.cf",
              "cryptoo/config/directory_names.cf",
              "cryptoo/config/directory_groups.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/config/machine.cf",
              "cryptoo/config/site.cf",
              "cryptoo/config/templates.cf",
              "cryptoo/util/classes.cf",
              "cryptoo/util/link_from.cf",
              "cryptoo/util/perms.cf",
              "cryptoo/util/setfattr.cf",
              "@(cryptoo:control.host_common_inputs)",
              "@(cryptoo:control.host_inputs)"
            };

}

bundle agent host(arch, role)

{

  vars:

    any::

      "layman_cache_list"
        slist => findfiles("/$(cryptoo:directory_names.volatile_overlay)/cache_*.xml");

      "layman_cache"
        string => nth("layman_cache_list", 0);

      "chroot"
        data => mergedata("cryptoo:site.config[chroot_guest]");

      "chroot_list"
        slist => getindices("chroot");

    have_desktop_guests::

      "desktop_guest_list"
        slist => getindices("desktop_guest"),
        classes => default:if_ok("have_desktop_guest_list");

    have_server_guests::

      "server_guest_list"
        slist => getindices("server_guest"),
        classes => default:if_ok("have_server_guest_list");

  classes:

    any::

      "$(arch)"
        expression => "any";

      "host"
        expression => "any";

      "root_bind_mount"
        expression => regline("device /dev/mapper/$(cryptoo:machine.hostname)-root mounted on /$(cryptoo:directory_names.mount_root).*", "$(cryptoo:file_names.mount_info)"),
        comment => "/ is mounted as a bind mount on /mnt/root. Gives access to underlying rootfs";

      "srv_mounted"
        expression => regline("device /dev/mapper/$(cryptoo:machine.hostname)-storage mounted on /$(cryptoo:directory_names.storage_base).*", "$(cryptoo:file_names.mount_info)"),
        comment => "backing LV is mounted for /srv";

      "have_grub"
        expression => fileexists("/$(cryptoo:file_names.grub_defaults)");

      "have_cryptoo"
        expression => fileexists("/$(cryptoo:file_names.cryptoo_profile)");

      "need_cryptoo"
        not => fileexists("/$(cryptoo:file_names.cryptoo_profile)");

      "have_crypttab"
        expression => fileexists("/$(cryptoo:file_names.crypttab)");

      "need_crypttab"
        not => fileexists("/$(cryptoo:file_names.crypttab)");

      "have_dracut_app"
        expression => fileexists("/$(cryptoo:file_names.dracut_app)");

      "have_dracut_image"
        expression => fileexists("/$(cryptoo:file_names.dracut_image)");

      "need_dracut_image"
        not => fileexists("/$(cryptoo:file_names.dracut_image)");

      "have_layman_app"
        expression => fileexists("/$(cryptoo:file_names.layman_app)");

      "have_layman_cache"
         expression => fileexists("$(layman_cache)");

      "need_layman_cache"
         not => fileexists("$(layman_cache)");

      "need_bitcoin_overlay"
        not => fileexists("/$(cryptoo:file_names.bitcoin_overlay)");

      "have_libvirtd_app"
        expression => fileexists("/$(cryptoo:file_names.libvirtd_app)");

    srv_started&(!srv_failed)::

      "srv_ready"
        expression => "any",
        comment => "every directory under /srv was created, and none failed";

    srv_ready&(!srv_created)::

      "all_ready"
        expression => "any",
        comment => "this is the normal case, because we normally don't need to create /srv";

  files:

    any::

      "/$(cryptoo:directory_groups.host_system)/."
        perms => cryptoo:system,
        create => "true",
        handle => "done_$(cryptoo:directory_groups.host_system)",
        comment => "create host-specific directories";

      "/$(cryptoo:directory_groups.host_system_private)/."
        perms => cryptoo:root,
        create => "true",
        handle => "done_$(cryptoo:directory_groups.host_system)",
        comment => "create host-specific root-only directories";

      "/$(cryptoo:file_names.dmcrypt_key)"
        perms => cryptoo:root,
        create => "false",
        comment => "ensure master HD encryption key is root-only";

      "/$(cryptoo:directory_groups.host_root_qemu)/."
        perms => cryptoo:root_qemu,
        create => "true",
        comment => "/etc/cryptoo/guest/{inbox,outbox}";

      "/$(cryptoo:file_names.dracut_conf)"
        perms => cryptoo:system,
        create => "true",
        edit_template => "/$(cryptoo:templates.template[dracut_conf])",
        classes => default:if_repaired("update_dracut"),
        comment => "configure dracut";

      "/$(cryptoo:file_names.env_kernel)"
        perms => cryptoo:system,
        create => "true",
        edit_template => "/$(cryptoo:templates.template[env_kernel])",
        classes => default:if_repaired("update_env"),
        comment => "create /etc/env.d/99kernel";

      "/$(cryptoo:directory_names.storage_base)/."
        perms => cryptoo:system,
        create => "true",
        classes => srv,
        comment => "create /srv mountpoint";

      "/$(cryptoo:file_names.libvirt_guests_conf)"
        perms => system,
        create => "false",
        edit_line => default:set_line_based("cryptoo:config.libvirt[libvirt_guests]", "=", "\s*=\s*", ".*", "\s*#\s*");

    have_grub::

      "/$(cryptoo:file_names.grub_defaults)"
        perms => cryptoo:system,
        create => "false",
        edit_line => default:delete_lines_matching("#.*GRUB_CMDLINE_LINUX=.*"),
        comment => "remove some example comments that interfere with the next promise";

      "/$(cryptoo:file_names.grub_defaults)"
        perms => cryptoo:system,
        create => "false",
        edit_line => default:set_quoted_values("cryptoo:config.grub"),
        comment => "configure /etc/default/grub";

    root_bind_mount::

      "/$(cryptoo:directory_names.mount_root)/$(cryptoo:file_names.dmcrypt_key)"
        perms => cryptoo:root,
        copy_from => default:local_cp("/$(cryptoo:file_names.dmcrypt_key)"),
        comment => "put a backup copy of the master HD encryption inside the encrypted volume";

    srv_mounted::

      "/$(cryptoo:directory_groups.host_system_storage)/."
        perms => cryptoo:system,
        create => "true",
        classes => srv_ready,
        comment => "create system directories under /srv";

      "/$(cryptoo:directory_groups.host_pm)/."
        perms => cryptoo:portage,
        create => "true",
        classes => srv_ready,
        comment => "create Portage-owned directories under /srv";

      "/$(cryptoo:directory_groups.host_pm_open)/."
        perms => cryptoo:portage_open,
        create => "true",
        classes => srv_ready,
        handle => "done_$(cryptoo:directory_groups.host_pm_open)",
        comment => "create Portage-owned writables directories under /srv";

      "/$(cryptoo:directory_names.storage_shared)/."
        depends_on => { "users_ok" },
        perms => cryptoo:guest,
        create => "true",
        classes => srv_ready,
        comment => "create master common storage directory";

      "/$(cryptoo:file_names.storage_pm_site_meta)"
        perms => cryptoo:system,
        create => "true",
        edit_template => "/$(cryptoo:templates.template[local_layout_conf])";

      "/$(cryptoo:file_names.storage_pm_site_repo)"
        perms => cryptoo:system,
        create => "true",
        edit_template => "/$(cryptoo:templates.template[site_repo_name])";

    need_machine_names::

      "/$(cryptoo:file_names.machine_names)"
        perms => cryptoo:system,
        create => "true",
        edit_template => "/$(cryptoo:templates.template[machine_names])";

    need_site_config::

      "/$(cryptoo:file_names.site_config)"
        perms => cryptoo:system,
        create => "true",
        edit_template => "/$(cryptoo:templates.template[site_config])",
        classes => default:if_repaired("site_config_available");

    have_libvirtd_app::

      "/$(cryptoo:directory_groups.host_qemu)/."
        perms => qemu,
        create => "true",
        handle => "done_$(cryptoo:directory_groups.host_qemu)",
        comment => "create qemu storage directories";

    have_libvirtd_app&srv_mounted::

      "/$(cryptoo:directory_names.storage_qemu)/."
        perms => cryptoo:guest,
        create => "true",
        handle => "done_$(cryptoo:directory_names.storage_qemu)",
        comment => "create base qemu storage directory";

  methods:

    any::

      "get a list of desktop guests"
        usebundle => extra_desktop_guests("$(this.role)"),
        useresult => "desktop_guest",
        classes => default:if_ok("have_desktop_guests");

      "get a list of server guests"
        usebundle => extra_server_guests("$(this.role)"),
        useresult => "server_guest",
        classes => default:if_ok("have_server_guests");

      "manage chroot guests"
        usebundle => cryptoo:cryptoo_filesystem("/$(cryptoo:directory_names.volatile_images)/$(chroot[$(chroot_list)][class])/$(chroot[$(chroot_list)][arch])/$(chroot[$(chroot_list)][multilib])/","chroot_$(chroot[$(chroot_list)][class])_$(chroot[$(chroot_list)][multilib])","$(chroot[$(chroot_list)][arch])","$(chroot[$(chroot_list)][multilib])");

      "manage crypttab"
        usebundle => cryptoo:crypttab;

      "configure /etc/fstab"
        usebundle => fstab("/", "host", "$(this.role)"),
        classes => default:if_repaired("fstab_repaired");

    srv_mounted::

      "manage common files"
        usebundle => cryptoo:cryptoo_filesystem("/","$(this.role)", "$(arch)", "no_multilib");

      "configure guest kernel"
        usebundle => cryptoo:kconfig("guest", "$(arch)"),
        classes => default:if_ok("kernel_ok");

    fstab_repaired::

      "activate all mountpoints"
        usebundle => cryptoo:mount_all,
        depends_on=> { "srv_ok" };

    need_subnet_config::

      "generate random subnets"
        usebundle => cryptoo:subnet,
        classes => default:if_ok("subnet_config_available");

    have_desktop_guest_list::

      "create inboxes and outboxes for desktop guests"
        usebundle => extra_guest_box("$(desktop_guest_list)");

    have_server_guest_list::

      "create inboxes and outboxes for server guests"
        usebundle => extra_guest_box("$(server_guest_list)");

  commands:

    update_env::

      "/$(cryptoo:file_names.envupdate_app)";

    need_cryptoo&srv_mounted::

      "/$(file_names.git_app) clone -b dev $(config.git_repositories[overlay]) /$(directory_names.storage_cryptoo)";

    (need_dracut_image|update_dracut)&(have_dracut_app&have_crypttab)::

      "/$(cryptoo:file_names.dracut_app) --force --no-compress /$(cryptoo:file_names.dracut_image)";

    need_layman_cache&have_layman_app::

    "/$(cryptoo:file_names.layman_app) -f";

    need_bitcoin_overlay&have_layman_cache::

      "/$(cryptoo:file_names.layman_app) -a bitcoin";

    srv_mounted&have_cryptoo::

      "/$(cryptoo:file_names.distfiles_perms_app)";

      "/$(cryptoo:file_names.pkgdir_perms_app)";

}
