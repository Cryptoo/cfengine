body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/config/directory_names.cf",
              "cryptoo/config/role.cf",
              "cryptoo/config/templates.cf",
              "cryptoo/util/perms.cf",
              "@(cryptoo:control.guest_inputs)"
            };

}

bundle agent bootstrap_guest(role, type, multilib)

{

  vars:

    any::

      "site_config"
        data => mergedata("cryptoo:site.config");

      "params"
        string => "$(role.params[$(this.role)])";

      "definition"
        string => "/$(directory_names.config_qemu)/$(this.role).xml";

      "guest_name"
        slist => classesmatching("cryptoo_name_.*");

      "custom_guests"
        slist => getindices("site_config[extra_guests]");

    defined_name::

      "name"
        string => "$(this.role)",
        classes => default:if_ok("have_name");

      "number"
        string => "$(config.defined_numbers[$(this.role)])",
        classes => default:if_ok("have_number");

      "fixed_json"
        string => "$(params)";

      "params_data"
        data => parsejson("$(fixed_json)"),
        classes => default:if_ok("have_json");

    named_guest&have_guest_name::

      "name"
        string => "$(extracted_name[1])",
        classes => default:if_ok("have_name");

      "fixed_json"
        string => "$(extracted_json[1])$(this.name)$(extracted_json[3])";

      "params_data"
        data => parsejson("$(fixed_json)"),
        classes => default:if_ok("have_json");

    "number_is_$(custom_guests)"::

      "number"
        string => "$(custom_guests)",
        classes => default:if_ok("have_number");

  classes:

    any::

      "named_guest"
        expression => isgreaterthan(length("guest_name"), "0");

      "defined_name"
        not => isgreaterthan(length("guest_name"), "0");

    named_guest::

      "have_guest_name"
        expression => regextract("cryptoo_name_(.*)", nth("guest_name", "0"), "extracted_name");

      "guest_name_found"
        expression => regextract('(?s)(.*"name": ")(.*?)(".*)', "$(this.params)", "extracted_json");

      "custom_guests_defined"
        expression => isgreaterthan(length("custom_guests"), "0");

    custom_guests_defined&have_name::

      "number_is_$(custom_guests)"
        expression => strcmp("$(site_config[extra_guests][$(custom_guests)][name])", "$(name)");

  files:

    image_created&have_json::

      "$(this.definition)"
        perms => qemu,
        create => "true",
        edit_template => "/$(templates.template[libvirt])",
        template_method => "mustache",
        template_data => parsejson(storejson("params_data[libvirt]")),
        classes => default:if_ok("xml_created");

  methods:

    have_name::

      "create image file"
        usebundle => image_file($(this.role), $(this.name), $(this.type), $(this.multilib)),
        classes => default:if_ok("image_created");

  commands:

    xml_created::

      "/$(file_names.virsh_app)"
        args => "define $(this.definition)",
        handle => "guest_defined";

      "/$(file_names.virsh_app)"
        args => "autostart $(this.name)",
        depends_on => { "guest_defined" },
        handle => "guest_enabled";

      "/$(file_names.virsh_app)"
        args => "start $(this.name)",
        depends_on => { "guest_enabled" };

  reports:

    any::

      "Creating a $(this.role) guest";

    have_json::

      "Guest name: $(this.name)";

    have_number::
      "Guest number: $(number)";

}
