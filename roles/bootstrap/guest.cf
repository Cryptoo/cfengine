body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/config/directory_names.cf",
              "cryptoo/config/role.cf",
              "cryptoo/config/templates.cf",
              "cryptoo/util/perms.cf",
              "@(cryptoo:control.guest_inputs)"
            };

}

bundle agent bootstrap_guest(role, type, multilib)

{

  vars:

    any::

      "params"
        string => "$(role.params[$(this.role)])";

      "params_data"
        data => parsejson("$(this.params)");

      "definition"
        string => "/$(directory_names.fs_config_qemu)/$(this.role).xml";

      "guest_name"
        slist => classesmatching("default:cryptoo_name_.*");

  classes:

    any::

      "have_guest_name"
        expression => isgreaterthan(length("guest_name", "0"));

  files:

    image_created::

      "$(this.definition)"
        perms => qemu,
        create => "true",
        edit_template => "/$(templates.template[libvirt])",
        template_method => "mustache",
        template_data => parsejson(storejson("params_data[libvirt]")),
        classes => default:if_ok("xml_created");

  methods:

    !any::

      "create image file"
        usebundle => image_file($(this.role), $(this.type), $(this.multilib)),
        classes => default:if_ok("image_created");

  commands:

    xml_created::

      "/$(file_names.virsh_app)"
        args => "define $(this.definition)",
        handle => "guest_defined";

      "/$(file_names.virsh_app)"
        args => "autostart $(this.role)",
        depends_on => { "guest_defined" },
        handle => "guest_enabled";

      "/$(file_names.virsh_app)"
        args => "start $(this.role)",
        depends_on => { "guest_enabled" };

  reports:

    any::

      "Creating a $(this.role) guest";

}
