body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/config/best.cf",
              "cryptoo/config/directory_names.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/config/site.cf",
              "cryptoo/util/contain.cf"
            };

}

bundle agent prepare_image(name, multilib, mount_location)

{

  vars:

    any::

      "image_file"
        string => "/$(directory_names.libvirt_images)/$(this.name).img";

      "image_size_mb"
        string => "8192";

  classes:

    any::

      "need_image"
        not => fileexists($(this.image_file));

  commands:

    need_image::

      "/$(file_names.dd_app)"
        args => "if=/dev/zero of=$(this.image_file) bs=1M count=$(this.image_size_mb)",
        contain => silent,
        handle => "image_created";

      "/$(file_names.losetup_app)"
        args => "-D",
        depends_on => { "image_created" },
        handle => "loop_ready";

      "/$(file_names.losetup_app)"
        args => "/dev/loop0 $(this.image_file)",
        depends_on => { "loop_ready" },
        handle => "loop_attached";

      "/$(file_names.mkfs_app)"
        args => "-t $(site.config[guest_fs][filesystem]) -E nodiscard /dev/loop0",
        depends_on => { "loop_attached" },
        contain => silent,
        handle => "image_fs_created";

      "/$(file_names.mount_app)"
        args => "-o $(site.config[guest_fs][options]) /dev/loop0 /$(this.mount_location)",
        depends_on => { "image_fs_created" },
        contain => silent,
        handle => "image_fs_mounted";

      "/$(file_names.tar_app)"
        args => "-xjpf $(best.stage3_amd64_$(this.multilib)) -C /$(this.mount_location)",
        depends_on => { "image_fs_mounted" },
        handle => "skeleton_extracted";

      "/$(file_names.rm_app)"
        args => "-r /$(this.mount_location)/$(directory_names.config_pm)",
        depends_on => { "skeleton_extracted" },
        classes => default:if_ok("image_prepared");

  reports:

    image_prepared::

      "image file created";

}
