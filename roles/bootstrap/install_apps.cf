body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/config/directory_names.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/util/classes.cf",
              "cryptoo/util/contain.cf",
              "@(cryptoo:control.role_inputs)"
            };

}

bundle agent install_apps(role)

{

  vars:

    any::

      "role_set"
        string => concat("@", "$(this.role)");

      "role_bundle"
        slist => bundlesmatching(".*:$(this.role)", "cryptoo_role");

  methods:

    apps_installed::

      "configure system"
        usebundle => $(role_bundle)("/$(directory_names.fs_mount_cryptoo)"),
        classes => default:if_ok("image_configured");

  commands:

    basic_system_emerged::

      "/$(file_names.emerge_app)"
        args => "--config-root=/$(directory_names.fs_volatile_images)/server/x86_64/no_multilib/ --root=/$(directory_names.fs_mount_cryptoo) --root-deps $(this.role_set)",
        contain => silent,
        classes => always_success;

      "/$(file_names.emerge_app)"
        args => "--config-root=/$(directory_names.fs_volatile_images)/server/x86_64/no_multilib/ --root=/$(directory_names.fs_mount_cryptoo) --root-deps -uD --reinstall changed-use @world",
        contain => silent,
        classes => default:if_ok("apps_installed");

    any::

      "/$(file_names.emerge_app)"
        args => "--config-root=/$(directory_names.fs_volatile_images)/server/x86_64/no_multilib/ --root=/$(directory_names.fs_mount_cryptoo) --root-deps --emptytree @system",
        contain => silent,
        classes => default:if_ok("basic_system_emerged");

  reports:

    basic_system_emerged::

      "basic system installed";

    apps_installed::

      "role apps installed";

    image_configured::

      "$(this.role) configured";

}
