body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/config/config.cf",
              "cryptoo/config/directory_names.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/config/network.cf",
              "cryptoo/config/site.cf",
              "cryptoo/config/templates.cf",
              "cryptoo/util/perms.cf"
            };

}

bundle agent i2p(root)

{

  meta:

    "tags" slist => { "cryptoo_role" };

  vars:

    any::

      "defined_numbers"
        data => readjson("$(sys.inputdir)/cryptoo/config/defined_numbers.json", 1M);

      "subnet_config"
        data => readjson("/$(file_names.subnet_config)", 1M);

      "i2p_conf[clientApp.0.args]"
        string => "$(config.services[i2p][console_port]) ::1,127.0.0.1,192.168.$(subnet_config[i2p]).$(defined_numbers[i2p]) ./webapps/";
      "i2p_conf[clientApp.1.args]"
        string => "sam.keys 127.0.0.1,192.168.$(subnet_config[i2p]).$(defined_numbers[i2p]) $(config.services[i2p][sam_port]) i2cp.tcp.host=127.0.0.1 i2cp.tcp.port=$(config.services[i2p][i2cp_port])";
      "i2p_conf[clientApp.1.startOnLoad]"
        string => "true";
      "i2p_conf[clientApp.5.startOnLoad]"
        string => "true";

      "i2p_router[i2np.ntcp.hostname]"
        string => "$(site.config[ddns])";
      "i2p_router[i2np.udp.host]"
        string => "$(i2p_router[i2np.ntcp.hostname])";

      "i2ptunnel_conf[tunnel.0.interface]"
        string => "192.168.$(subnet_config[i2p]).$(defined_numbers[i2p])";
      "i2ptunnel_conf[tunnel.0.listenPort]"
        string => "$(config.services[i2p][proxy_port])";
      "i2ptunnel_conf[tunnel.0.i2cpPort]"
        string => "$(config.services[i2p][i2cp_port])";
      "i2ptunnel_conf[tunnel.1.interface]"
        string => "192.168.$(subnet_config[i2p]).$(defined_numbers[i2p])";
      "i2ptunnel_conf[tunnel.1.listenPort]"
        string => "$(config.services[i2p][irc2p_port])";
      "i2ptunnel_conf[tunnel.1.i2cpPort]"
        string => "$(config.services[i2p][i2cp_port])";
      "i2ptunnel_conf[tunnel.2.interface]"
        string => "192.168.$(subnet_config[i2p]).$(defined_numbers[i2p])";
      "i2ptunnel_conf[tunnel.2.listenPort]"
        string => "$(config.services[i2p][monotone_port])";
      "i2ptunnel_conf[tunnel.2.i2cpPort]"
        string => "$(config.services[i2p][i2cp_port])";
      "i2ptunnel_conf[tunnel.3.targetHost]"
        string => "$(config.services[i2p][eepsite_host])";
      "i2ptunnel_conf[tunnel.3.targetPort]"
        string => "$(config.services[i2p][eepsite_port])";
      "i2ptunnel_conf[tunnel.3.i2cpPort]"
        string => "$(config.services[i2p][i2cp_port])";
      "i2ptunnel_conf[tunnel.4.interface]"
        string => "192.168.$(subnet_config[i2p]).$(defined_numbers[i2p])";
      "i2ptunnel_conf[tunnel.4.listenPort]"
        string => "$(config.services[i2p][smtp_port])";
      "i2ptunnel_conf[tunnel.4.i2cpPort]"
        string => "$(config.services[i2p][i2cp_port])";
      "i2ptunnel_conf[tunnel.5.interface]"
        string => "192.168.$(subnet_config[i2p]).$(defined_numbers[i2p])";
      "i2ptunnel_conf[tunnel.5.listenPort]"
        string => "$(config.services[i2p][pop_port])";
      "i2ptunnel_conf[tunnel.5.i2cpPort]"
        string => "$(config.services[i2p][i2cp_port])";
      "i2ptunnel_conf[tunnel.6.interface]"
        string => "192.168.$(subnet_config[i2p]).$(defined_numbers[i2p])";
      "i2ptunnel_conf[tunnel.6.listenPort]"
        string => "$(config.services[i2p][sproxy_port])";
      "i2ptunnel_conf[tunnel.6.i2cpPort]"
        string => "$(config.services[i2p][i2cp_port])";

      "unbound_conf[interface]"
        string => "192.168.$(subnet_config[i2p]).$(defined_numbers[i2p])";
      "unbound_conf[port]"
        string => "$(config.services[i2p][dns_port])";
      "unbound_conf[access-control]"
        string => "192.168.$(subnet_config[vpndmz]).$(defined_numbers[dns]) allow";
      "unbound_conf[local-zone]"
        string => "\"i2p\" redirect";
      "unbound_conf[local-data]"
        string => "\"i2p A $(config.transparent_proxy_dns[i2p])\"";

      "privoxy_conf[hostname]"
        string => "$(network.machine_names[$(defined_numbers[i2p])][name])";
      "privoxy_conf[listen-address]"
        string => "192.168.$(subnet_config[i2p]).$(defined_numbers[i2p]):$(config.services[i2p][tproxy_port])";
      "privoxy_conf[forward]"
        string => "/ 192.168.$(subnet_config[i2p]).$(defined_numbers[i2p]):$(config.services[i2p][proxy_port])";
      "privoxy_conf[accept-intercepted-requests]"
        string => "1";

    have_i2p_router_config::

      "router_config_string"
        string => readfile("$(this.root)$(file_names.i2p_router_config)", "0");

    router_internal_port_configured::

      "port_data"
        string => '
          {
            "i2p":
              {
                "internal": "$(i2p_internal_port[1])",
                "external": "$(i2p_external_port[1])"
              }
          }';

  classes:

    any::

      "have_i2p_config"
        expression => fileexists("$(this.root)$(file_names.i2p_config)");

      "have_i2ptunnel_config"
        expression => fileexists("$(this.root)$(file_names.i2ptunnel_config)");

      "have_i2p_router_config"
        expression => fileexists("$(this.root)$(file_names.i2p_router_config)");

      "have_unbound_config"
        expression => fileexists("$(this.root)$(file_names.unbound_config)");

      "have_privoxy_config"
        expression => fileexists("$(this.root)$(file_names.privoxy_config)");

    have_i2p_router_config::

      "ddns_set"
        not => strcmp("example.com", "$(site.config[ddns])");

      "router_internal_port_configured"
        expression => regextract("i2np\.udp\.internalPort=([0-9]+)", "$(router_config_string)", "i2p_internal_port");

      "router_external_port_configured"
        expression => regextract("i2np\.udp\.port=([0-9]+)", "$(router_config_string)", "i2p_external_port");

  files:

    any::

      "$(this.root)$(directory_names.fs_config_unbound)/."
        perms => system,
        create => "true";

      "$(this.root)$(directory_names.fs_config_privoxy)/."
        perms => system,
        create => "true";

      "$(this.root)$(directory_names.fs_i2p_base)/."
        perms => i2p,
        create => "true";

      "$(this.root)$(directory_names.fs_i2p_user)/."
        perms => i2p,
        create => "true";

      "$(this.root)$(file_names.i2p_service)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[i2p_service])";

    have_i2p_config::

      "$(this.root)$(file_names.i2p_config)"
        create => "false",
        edit_line => default:set_line_based("cryptoo:i2p.i2p_conf", "=", "\s*=\s*", ".*", "\s*#\s*");

    ddns_set::

      "$(this.root)$(file_names.i2p_router_config)"
        create => "false",
        edit_line => default:set_line_based("cryptoo:i2p.i2p_router", "=", "\s*=\s*", ".*", "\s*#\s*");

    have_i2ptunnel_config::

      "$(this.root)$(file_names.i2ptunnel_config)"
        create => "false",
        edit_line => default:set_line_based("cryptoo:i2p.i2ptunnel_conf", "=", "\s*=\s*", ".*", "\s*#\s*");

    have_unbound_config::

      "$(this.root)$(file_names.unbound_config)"
        create => "false",
        edit_line => default:set_line_based("cryptoo:i2p.unbound_conf", ": ", ":\s", ".*", "\s*#\s*");

    have_privoxy_config::

      "$(this.root)$(file_names.privoxy_config)"
        create => "false",
        edit_line => default:set_line_based("cryptoo:i2p.privoxy_conf", " ", "\s+", ".*", "\s*#\s*");

  methods:

    any::

      "configure system as an I2P node"
        usebundle => server_guest("$(this.root)", "i2p", "x86_64", "no_multilib");

    router_internal_port_configured::

      "save port info to outbox"
        usebundle => default:file_make("$(this.root)$(file_names.port_info_outgoing)", "$(this.port_data)");

}
