body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/config/config.cf",
              "cryptoo/config/directory_names.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/config/network.cf",
              "cryptoo/config/site.cf",
              "cryptoo/config/templates.cf",
              "cryptoo/util/link_from.cf",
              "cryptoo/util/perms.cf"
            };

}

bundle agent bitcoin_testnet(root)

{

  meta:

    "tags" slist => { "cryptoo_role" };

  vars:

    any::

      "defined_numbers"
        data => mergedata("cryptoo:config.defined_numbers");

      "subnet_config"
        data => mergedata("cryptoo:network.subnet_config");

    have_hidden_service::

      "hidden_service_data"
        data => readjson("/$(file_names.hidden_service_incoming)", 1M),
        classes => default:if_ok("have_hidden_service_data");

    !hidden_service_evaluated::

      "externalip"
        string => '"externalip":
              [
                { "name": "$(site.config[ddns]):$(config.service_info[bitcoin][testnet_port])" }
              ]';

    have_bitcoin_hs::

      "externalip"
        string => '"externalip":
              [
                { "name": "$(site.config[ddns]):$(config.service_info[bitcoin][testnet_port])" },
                { "name": "$(hidden_service_data[bitcoin_testnet]):$(config.service_info[bitcoin][testnet_port])" }
              ]',
        classes => default:if_ok("have_onion_externalip");

    !have_rpc_password::

      "random_rpc_password"
        string => canonify(readfile("/proc/sys/kernel/random/uuid", "0"));

      "rpc_json"
        string => '{ "rpc_password": "$(this.random_rpc_password)" }',
        classes => default:if_ok("have_rpc_json");

    have_rpc_password&(have_onion_externalip|(hidden_service_data_evaluated&!have_bitcoin_hs)|(hidden_service_evaluated&!have_hidden_service))::

      "rpc_data"
        data => readjson("$(this.root)$(file_names.bitcoin_rpc_outgoing)", 1M);

      "bitcoin_conf"
        string => '
          {
            "password": "$(rpc_data[rpc_password])",
            "allow_ip": "192.168.$(subnet_config[lan]).0/24",
            "rpc_bind": "192.168.$(subnet_config[vpndmz]).$(defined_numbers[bitcoin_testnet])",
            "rpc_port": "$(config.service_info[bitcoin][rpc_port])",
            "tor_node": "192.168.$(subnet_config[tor]).$(defined_numbers[tor])",
            "tor_port": "$(config.service_info[tor][socks_port])",
            "listen":
              [
                { "bind": "192.168.$(subnet_config[ispdmz]).$(defined_numbers[bitcoin_testnet]):$(config.service_info[bitcoin][testnet_port])" },
                { "bind": "192.168.$(subnet_config[vpndmz]).$(defined_numbers[bitcoin_testnet]):$(config.service_info[bitcoin][testnet_port])" }
              ],
            $(this.externalip)
          }',
          classes => default:if_ok("have_bitcoin_conf");

  classes:

    any::

      "bootstrap"
        not => strcmp("$(this.root)", "/");

      "have_rpc_password"
        expression => fileexists("$(this.root)$(file_names.bitcoin_rpc_outgoing)");

      "have_hidden_service"
        expression => fileexists("$(this.root)$(file_names.hidden_service_incoming)");

      "hidden_service_evaluated"
        expression => "any";

    have_hidden_service_data::

      "have_bitcoin_hs"
        expression => isvariable("hidden_service_data[bitcoin_testnet]");

      "hidden_service_data_evaluated"
        expression => "any";

  files:

    any::

      "$(this.root)$(directory_names.bitcoin_base)/."
        perms => bitcoin,
        create => "true";

      "$(this.root)$(file_names.bitcoind_autorestart)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[ini])",
        template_method => "mustache",
        template_data => mergedata("cryptoo:config.systemd_services[autorestart]"),
        classes => default:if_repaired("daemon_reload");

    !bootstrap::

      "/$(directory_names.bitcoin_home)/."
        perms => bitcoin,
        create => "true";

      "/$(file_names.bitcoin_conf_link)"
        move_obstructions => "true",
        link_from => bitcoin_conf;

    have_bitcoin_conf::

      "$(this.root)$(file_names.bitcoin_conf)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[bitcoin_conf_testnet])",
        template_method => "mustache",
        template_data => parsejson($(this.bitcoin_conf)),
          classes => default:if_repaired("restart_bitcoin");

  methods:

    any::

      "configure system as a bitcoind guest"
        usebundle => server_guest("$(this.root)", "bitcoin_testnet", "x86_64", "no_multilib");

    !have_rpc_password&have_rpc_json::

      "generate random rpc password"
        usebundle => default:file_make("$(this.root)$(file_names.bitcoin_rpc_outgoing)", "$(this.rpc_json)");

  commands:

    daemon_reload&(!bootstrap)::

      "$(this.root)$(file_names.systemd_app)"
        args => "daemon-reload";

    restart_bitcoin&(!bootstrap)::

      "/$(file_names.systemd_app)"
        args => "restart bitcoind";

}
