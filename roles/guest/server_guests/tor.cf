body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/config/config.cf",
              "cryptoo/config/directory_names.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/config/network.cf",
              "cryptoo/util/perms.cf"
            };

}

bundle agent tor(root)

{

  meta:

    "tags" slist => { "cryptoo_role" };

  vars:

    any::

      "torrc"
        string => '
          {
            "external": "192.168.$(network.subnet_config[ispdmz]).$(config.defined_numbers[tor])",
            "internal": "192.168.$(network.subnet_config[tor]).$(config.defined_numbers[tor])",
            "socks_port": "$(config.service_info[tor][socks_port])",
            "dns_port": "$(config.service_info[tor][dns_port])",
            "trans_port": "$(config.service_info[tor][tproxy_port])",
            "onion_subnet": "$(config.transparent_proxy_net[tor])",
            "socks":
              [
                { "subnet": "192.168.$(network.subnet_config[tor]).0/24" },
                { "subnet": "192.168.$(network.subnet_config[vpndmz]).0/24" },
                { "subnet": "192.168.$(network.subnet_config[lan]).0/24" }
              ],
            "hidden_service":
              [
                {
                  "dir": "/$(directory_names.bitcoin_hs)",
                  "port": "$(config.service_info[bitcoin][external_port]) 192.168.$(network.subnet_config[vpndmz]).$(config.defined_numbers[bitcoin]):$(config.service_info[bitcoin][external_port])"
                },
                {
                  "dir": "/$(directory_names.bitcoin_testnet_hs)",
                  "port": "$(config.service_info[bitcoin][testnet_port]) 192.168.$(network.subnet_config[vpndmz]).$(config.defined_numbers[bitcoin_testnet]):$(config.service_info[bitcoin][testnet_port])"
                },
                {
                  "dir": "/$(directory_names.btcd_hs)",
                  "port": "$(config.service_info[bitcoin][external_port]) 192.168.$(network.subnet_config[vpndmz]).$(config.defined_numbers[btcd]):$(config.service_info[bitcoin][external_port])"
                },
                {
                  "dir": "/$(directory_names.btcd_testnet_hs)",
                  "port": "$(config.service_info[bitcoin][testnet_port]) 192.168.$(network.subnet_config[vpndmz]).$(config.defined_numbers[btcd_testnet]):$(config.service_info[bitcoin][testnet_port])"
                }
              ]
          }
        ';

      "polipo"
        string => '
          {
            "tor_port": "$(config.service_info[tor][socks_port])",
            "address": "192.168.$(network.subnet_config[tor]).$(config.defined_numbers[tor])",
            "hostname": "$(network.machine_names[$(config.defined_numbers[tor])][name])",
            "allowed": "192.168.$(network.subnet_config[tor]).0/24, 192.168.$(network.subnet_config[vpndmz]).0/24, 192.168.$(network.subnet_config[lan]).0/24"
          }
        ';

    have_bitcoin_hs_hostname_file::

      "bitcoin_hs_hostname"
        string => readfile("/$(file_names.bitcoin_hs)", "0"),
        classes => default:if_ok("have_bitcoin_hs_hostname");

    have_bitcoin_testnet_hs_hostname_file::

      "bitcoin_testnet_hs_hostname"
        string => readfile("/$(file_names.bitcoin_testnet_hs)", "0"),
        classes => default:if_ok("have_bitcoin_testnet_hs_hostname");

    have_btcd_hs_hostname_file::

      "btcd_hs_hostname"
        string => readfile("/$(file_names.btcd_hs)", "0"),
        classes => default:if_ok("have_btcd_hs_hostname");

    have_btcd_testnet_hs_hostname_file::

      "btcd_testnet_hs_hostname"
        string => readfile("/$(file_names.btcd_testnet_hs)", "0"),
        classes => default:if_ok("have_btcd_testnet_hs_hostname");

    !hs_scan::

      "hs_hostname_bitcoin"
        string => "";

      "hs_hostname_bitcoin_testnet"
        string => "";

      "hs_hostname_btcd"
        string => "";

      "hs_hostname_btcd_testnet"
        string => "";

    have_bitcoin_hs_hostname::

      "hs_hostname_bitcoin"
        string => '"bitcoin": "$(this.bitcoin_hs_hostname)",';

    have_bitcoin_testnet_hs_hostname::

      "hs_hostname_bitcoin_testnet"
        string => '"bitcoin_testnet": "$(this.bitcoin_testnet_hs_hostname)",';

    have_btcd_hs_hostname::

      "hs_hostname_btcd"
        string => '"btcd": "$(this.btcd_hs_hostname)",';

    have_btcd_testnet_hs_hostname::

      "hs_hostname_btcd_testnet"
        string => '"btcd_testnet": "$(this.btcd_testnet_hs_hostname)",';

    hs_scan::

      "hs_hostname"
        string => '
          {
            $(hs_hostname_bitcoin)
            $(hs_hostname_bitcoin_testnet)
            $(hs_hostname_btcd)
            $(hs_hostname_btcd_testnet)
          }',
        classes => default:if_ok("have_hs_json");

  classes:

    !bootstrap::

      "have_bitcoin_hs_hostname_file"
        expression => fileexists("/$(file_names.bitcoin_hs)");

      "have_bitcoin_testnet_hs_hostname_file"
        expression => fileexists("/$(file_names.bitcoin_testnet_hs)");

      "have_btcd_hs_hostname_file"
        expression => fileexists("/$(file_names.btcd_hs)");

      "have_btcd_testnet_hs_hostname_file"
        expression => fileexists("/$(file_names.btcd_testnet_hs)");

      "have_hs_hostnames"
        expression => fileexists("/$(file_names.hidden_service_outgoing)");

      "hs_scan"
        expression => "any";

  files:

    any::

      "$(this.root)$(directory_names.config_tor)/."
        perms => system,
        create => "true";

      "$(this.root)$(directory_names.config_tor)/."
        perms => system,
        create => "true";

      "$(this.root)$(directory_names.volatile_tor)/."
        perms => tor,
        create => "true";

      "$(this.root)$(file_names.torrc)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[torrc])",
        template_method => "mustache",
        template_data => parsejson($(this.torrc)),
        classes => default:if_repaired("reload_tor");

      "$(this.root)$(file_names.tor_service)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[ini])",
        template_method => "mustache",
        template_data => mergedata("cryptoo:config.systemd_services[tor]"),
        classes => default:if_repaired("daemon_reload");

      "$(this.root)$(file_names.polipo_config)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[polipo])",
        template_method => "mustache",
        template_data => parsejson($(this.polipo));

      "$(this.root)$(file_names.tor_autorestart)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[ini])",
        template_method => "mustache",
        template_data => mergedata("cryptoo:config.systemd_services[autorestart]"),
        classes => default:if_repaired("daemon_reload");

    !bootstrap::

      "$(this.root)$(directory_names.hidden_services)/."
        perms => tor,
        create => "true";

      "$(this.root)$(directory_names.bitcoin_hs)/."
        perms => tor,
        create => "true";

      "$(this.root)$(directory_names.bitcoin_testnet_hs)/."
        perms => tor,
        create => "true";

      "$(this.root)$(directory_names.btcd_hs)/."
        perms => tor,
        create => "true";

      "$(this.root)$(directory_names.btcd_testnet_hs)/."
        perms => tor,
        create => "true";

    have_hs_hostnames::

      "/$(file_names.hidden_service_outgoing)"
        perms => root,
        create => "false";

  methods:

    any::

      "configure system as a Tor node"
        usebundle => server_guest("$(this.root)", "tor", "x86_64", "no_multilib");

    have_hs_json::

      "generate random rpc password"
        usebundle => default:file_make("/$(file_names.hidden_service_outgoing)", "$(this.hs_hostname)");

  commands:

    daemon_reload&(!bootstrap)::

      "/$(file_names.systemd_app)"
        args => "daemon-reload",
        classes => default:if_repaired("reload_tor");

    reload_tor&(!bootstrap)::

      "/$(file_names.systemd_app)"
        args => "restart tor";

}
