body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/config/config.cf",
              "cryptoo/config/directory_names.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/config/network.cf",
              "cryptoo/config/templates.cf",
              "cryptoo/util/perms.cf"
            };

}

bundle agent freenet(root)

{

  meta:

    "tags" slist => { "cryptoo_role" };

  vars:

    any::

      "defined_numbers"
        data => readjson("$(sys.inputdir)/cryptoo/config/defined_numbers.json", 1M);

      "subnet_config"
        data => readjson("/$(file_names.subnet_config)", 1M);

      "freenet_conf[fproxy.allowedHosts]"
        string => "127.0.0.1,0:0:0:0:0:0:0:1,192.168.$(subnet_config[lan]).0/24";
      "freenet_conf[fproxy.bindTo]"
        string => "127.0.0.1,0:0:0:0:0:0:0:1,192.168.$(subnet_config[vpndmz]).$(defined_numbers[freenet])";
      "freenet_conf[fproxy.allowedHostsFullAccess]"
        string => "127.0.0.1,0:0:0:0:0:0:0:1,192.168.$(subnet_config[lan]).0/24";
      "freenet_conf[fproxy.port]"
        string => "$(config.services[freenet][fproxy_port])";
      "freenet_conf[fcp.allowedHosts]"
        string => "127.0.0.1,0:0:0:0:0:0:0:1,192.168.$(subnet_config[lan]).0/24";
      "freenet_conf[fcp.bindTo]"
        string => "127.0.0.1,0:0:0:0:0:0:0:1,192.168.$(subnet_config[vpndmz]).$(defined_numbers[freenet])";
      "freenet_conf[fcp.allowedHostsFullAccess]"
        string => "127.0.0.1,0:0:0:0:0:0:0:1,192.168.$(subnet_config[lan]).0/24";
      "freenet_conf[fcp.port]"
        string => "$(config.services[freenet][fcp_port])";
      "freenet_conf[node.opennet.bindTo]"
        string => "192.168.$(subnet_config[ispdmz]).$(defined_numbers[freenet])";
      "freenet_conf[node.bindTo]"
        string => "192.168.$(subnet_config[ispdmz]).$(defined_numbers[freenet])";
      "freenet_conf[node.opennet.acceptSeedConnections]"
        string => "true";

    have_freenet_config::

      "freenet_config_string"
        string => readfile("$(this.root)$(file_names.freenet_config)", "0"),
        classes => default:if_ok("have_config_string");

    opennet_port_configured::

      "port_data"
        string => '
          {
            "freenet":
              {
                "opennet": "$(opennet_port[1])",
                "darknet": "$(darknet_port[1])"
              }
          }',
          classes => default:if_ok("have_port_json");

  classes:

    any::

      "have_freenet_config"
        expression => fileexists("$(this.root)$(file_names.freenet_config)");

    have_config_string::

      "opennet_port_configured"
        expression => regextract("node\.opennet\.listenPort=([0-9]+)", "$(freenet_config_string)", "opennet_port");

      "darknet_port_configured"
        expression => regextract("node\.listenPort=([0-9]+)", "$(freenet_config_string)", "darknet_port");

  files:

    any::

      "$(this.root)$(directory_names.freenet_base)/."
        perms => freenet,
        create => "true";

      "$(this.root)$(file_names.freenet_config)"
        perms => freenet,
        create => "true",
        edit_line => default:set_line_based("cryptoo:freenet.freenet_conf", "=", "\s*=\s*", ".*", "\s*#\s*");

      "$(this.root)$(file_names.freenet_service)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[ini])",
        template_method => "mustache",
        template_data => mergedata("cryptoo:config.systemd_services[freenet]");

  methods:

    any::

      "configure system as an freenet node"
        usebundle => server_guest("$(this.root)", "freenet", "x86_64", "no_multilib");

    have_port_json::

      "save port info to outbox"
        usebundle => default:file_make("$(this.root)$(file_names.port_info_outgoing)", "$(this.port_data)");

}
