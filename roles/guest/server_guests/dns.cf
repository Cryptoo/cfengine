body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/config/config.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/config/network.cf",
              "cryptoo/config/templates.cf",
              "cryptoo/util/perms.cf"
            };

}

bundle agent dns(root)

{

  meta:

    "tags" slist => { "cryptoo_role" };

  vars:

    any::

      "dnsmasq"
        string => '
          {
            "resolv": "$(file_names.dns_config_dnsmasq)",
            "tor": "192.168.$(network.subnet_config[tor]).$(config.defined_numbers[tor])",
            "i2p": "192.168.$(network.subnet_config[i2p]).$(config.defined_numbers[i2p])",
            "listen": "192.168.$(network.subnet_config[vpndmz]).$(config.defined_numbers[dns])"
          }
        ';

      "dns_external"
        string => '
          {
            "nameservers":
               [
                 { "nameserver": "$(config.dns[primary])" },
                 { "nameserver": "$(config.dns[backup])" }
               ]
          }
        ';

  files:

    any::

      "$(this.root)$(file_names.dnsmasq_conf)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[dnsmasq])",
        template_method => "mustache",
        template_data => parsejson($(this.dnsmasq));

      "$(this.root)$(file_names.dns_config_dnsmasq)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[resolv])",
        template_method => "mustache",
        template_data => parsejson($(this.dns_external));

  methods:

    any::

      "configure system as a DNS server"
        usebundle => server_guest("$(this.root)", "dns", "x86_64", "no_multilib");

}
