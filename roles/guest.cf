body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/common/fstab.cf",
              "cryptoo/common/mounts.cf",
              "cryptoo/common/systemd.cf",
              "cryptoo/config/directory_groups.cf",
              "cryptoo/config/directory_names.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/config/templates.cf",
              "cryptoo/util/contain.cf",
              "cryptoo/util/link_from.cf",
              "cryptoo/util/perms.cf",
              "@(cryptoo:control.guest_inputs)"
            };

}

bundle agent common_guest(root, type, role, arch)

{

  vars:

    !ssh_keys_scanned::

      "master_ssh_key"
        string => "";

      "extra_ssh_keys"
        string => "";

    have_master_ssh_key::

      "master_ssh_key"
        string => readfile("/$(file_names.master_ssh_key)", "0"),
        classes => default:if_ok("master_ssh_key_read");

      "extra_ssh_keys"
        string => readfile("/$(file_names.extra_ssh_keys)", "0"),
        classes => default:if_ok("extra_ssh_keys_read");

    ssh_ready::

      "authorized_keys"
        string => "$(master_ssh_key)$(const.endl)$(extra_ssh_keys)",
        classes => default:if_ok("have_authorized_keys");

  classes:

    any::

      "have_systemctl"
        expression => fileexists("$(root)$(file_names.systemd_app)");

      "bootstrap"
        not => strcmp("$(this.root)", "/");

      "$(this.type)_guest"
        expression => "any";

      "have_master_ssh_key"
        expression => fileexists("/$(file_names.master_ssh_key)");

      "have_extra_ssh_keys"
        expression => fileexists("/$(file_names.extra_ssh_keys)");

      "ssh_keys_scanned"
        expression => "any";

    (master_ssh_key_read|(!have_master_ssh_key))&(extra_ssh_keys_read|(!have_extra_ssh_keys))::

      "ssh_ready"
        expression => "any";

  files:

    any::

      "$(root)$(directory_groups.guest_system)/."
        perms => system,
        create => "true";

      "$(root)$(file_names.serial_autologin)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[ini])",
        template_method => "mustache",
        template_data => mergedata("cryptoo:config.systemd_services[serial_autologin]"),
        classes => default:if_repaired("daemon_reload");

      "$(root)$(file_names.authorized_keys)"
        perms => root,
        create => "true";

      "$(root)$(file_names.root_tmux)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[tmux_guest])";

      "$(root)$(directory_names.debug_symbols)/."
        move_obstructions => "true",
        link_from => debug_symbols;

      "$(root)$(directory_names.debug_sources)/."
        move_obstructions => "true",
        link_from => debug_sources;

    !bootstrap::
      "$(root)$(directory_groups.guest_system_private)/."
        perms => root,
        create => "true";

    bootstrap::
      "$(root)$(directory_groups.common_cryptoo_private)/."
        perms => root,
        create => "true";

  methods:

    any::

      "configure systemd"
        usebundle => systemd($(this.root), $(this.role));

      "configure /etc/fstab"
        usebundle => fstab("$(this.root)", "guest", "$(this.role)"),
        classes => default:if_repaired("fstab_repaired");

    fstab_repaired&(!bootstrap)::

      "activate all mountpoints"
        usebundle => mount_all;

  methods:

    have_authorized_keys::

      "generate authorized_keys"
        usebundle => default:file_make("$(this.root)$(file_names.authorized_keys)", "$(this.authorized_keys)");

  commands:

    daemon_reload&have_systemctl&(!bootstrap)::

      "/$(file_names.systemd_app)"
        args => "daemon-reload",
        contain => basic_chroot($(root));

  reports:

    bootstrap::

      "Bootstrapping guest in $(this.root)";

}
