body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/common/fstab/chroot.cf",
              "cryptoo/common/fstab/guest.cf",
              "cryptoo/common/fstab/master.cf",
              "cryptoo/config/directory_names.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/config/site.cf",
              "cryptoo/config/templates.cf",
              "cryptoo/util/perms.cf"
            };

}

bundle agent fstab(root, type, role)

{

  vars:

    any::

      "chroot"
        data => mergedata("cryptoo:site.config[chroot_guest]");

      "chroot_list"
        slist => getindices("chroot");

      "chroot_path[$(chroot_list)]"
        string => "/$(directory_names.volatile_images)/$(chroot[$(chroot_list)][class])/$(chroot[$(chroot_list)][arch])/$(chroot[$(chroot_list)][multilib])/";

      "chroot_path_list"
        slist => getvalues("chroot_path");

    fstab_host&have_mounts::

      "mount_list"
        slist => getvalues("fstab_chroot");

      "mounts"
        string => join(", ", "mount_list");

      "fstab_final"
        string => '
          {
            "mounts":
              [
                 $(fstab_host[001]),
                 $(fstab_host[002]),
                 $(fstab_host[003]),
                 $(fstab_host[004]),
                 $(fstab_host[005]),
                 $(fstab_host[006]),
                 $(fstab_host[007]),
                 $(fstab_host[008]),
                 $(fstab_host[009]),
                 $(fstab_host[010]),
                 $(fstab_host[011]),
                 $(fstab_host[012]),
                 $(fstab_host[013]),
                 $(fstab_host[014]),
                 $(fstab_host[015]),
                 $(fstab_host[016]),
                 $(fstab_host[017]),
                 $(mounts)
              ]
          }',
        classes => default:if_ok("mounts_ready");

    fstab_guest&have_mounts::

      "fstab_final"
        string => '
          {
            "mounts":
              [
                 $(fstab_guest[001]),
                 $(fstab_guest[002]),
                 $(fstab_guest[003]),
                 $(fstab_guest[004]),
                 $(fstab_guest[005]),
                 $(fstab_guest[006]),
                 $(fstab_guest[007]),
                 $(fstab_guest[008]),
                 $(fstab_guest[009]),
                 $(fstab_guest[010]),
                 $(fstab_guest[011]),
                 $(fstab_guest[012]),
                 $(fstab_guest[013]),
                 $(fstab_guest[014]),
                 $(fstab_guest[015]),
                 $(fstab_guest[016])
              ]
          }',
        classes => default:if_ok("mounts_ready");

  classes:

    any::

      "fstab_$(type)"
        expression => "any";

  files:

    mounts_ready::

      "$(root)$(file_names.fstab)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[fstab_mustache])",
        template_method => "mustache",
        template_data => parsejson($(this.fstab_final)),
        comment => "configure /etc/fstab";

  methods:

    fstab_host::

      "get basic host mounts"
        usebundle => fstab_master,
        useresult => "fstab_host",
        classes => default:if_ok("basic_mounts");

    fstab_guest::

      "get guest mounts"
        usebundle => fstab_guest($(this.role)),
        useresult => "fstab_guest",
        classes => default:if_ok("have_mounts");

    basic_mounts::

      "get basic chroot mounts"
        usebundle => fstab_chroot("$(chroot_path_list)"),
        useresult => "fstab_chroot",
        classes => default:if_ok("have_mounts");

}
