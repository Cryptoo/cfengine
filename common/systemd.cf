body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/common/systemd/default_target.cf",
              "cryptoo/common/systemd/networkd.cf",
              "cryptoo/common/systemd/service.cf",
              "cryptoo/config/file_groups.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/config/templates.cf",
              "cryptoo/util/contain.cf",
              "cryptoo/util/link_from.cf",
              "cryptoo/util/perms.cf"
            };

}

bundle agent systemd(root, role)

{

  vars:

    any::

      "hostname"
        string => '{ "value": "$(machine.hostname)" }';

      "systemd_services"
        slist => getvalues("file_groups.systemd_enabled[$(this.role)]");

  classes:

    any::

      "have_systemctl"
        expression => fileexists("$(root)$(file_names.systemd_app)");

      "bootstrap"
        not => strcmp("$(this.root)", "/");

  files:

    any::

      "$(root)$(file_names.hostname_systemd)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[value])",
        template_method => "mustache",
        template_data => parsejson($(this.hostname));

      "$(root)$(file_names.cf_execd_service)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[ini])",
        template_method => "mustache",
        template_data => mergedata("cryptoo:config.systemd_services[cf_execd]"),
        classes => default:if_repaired("daemon_reload");

      "$(root)$(file_names.cf_monitord_service)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[ini])",
        template_method => "mustache",
        template_data => mergedata("cryptoo:config.systemd_services[cf_monitord]"),
        classes => default:if_repaired("daemon_reload");

      "$(root)$(file_names.cf_serverd_service)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[ini])",
        template_method => "mustache",
        template_data => mergedata("cryptoo:config.systemd_services[cf_serverd]"),
        classes => default:if_repaired("daemon_reload");

      "$(root)$(file_names.ipset_service)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[ini])",
        template_method => "mustache",
        template_data => mergedata("cryptoo:config.systemd_services[ipset]"),
        classes => default:if_repaired("daemon_reload");

      "$(root)$(file_names.shorewall_service)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[ini])",
        template_method => "mustache",
        template_data => mergedata("cryptoo:config.systemd_services[shorewall]"),
        classes => default:if_repaired("daemon_reload");

      "$(root)$(directory_names.config_units_multi_user)/$(config.core_systemd)"
        move_obstructions => "true",
        link_from => systemd("$(config.core_systemd)");

  methods:

    any::

      "configure systemd-networkd"
        usebundle => networkd($(this.root), $(this.role));

    have_systemctl::

      "set default target"
        usebundle => default_target("$(this.root)", "$(this.role)");

      "enable services"
        usebundle => systemd_enable($(root), $(systemd_services));

# This bundle always attempts to start systemd-networkd even though it's already running.
#      "start systemd services"
#        usebundle => default:standard_services($(systemd_services), "start");

  commands:

# Something about this is causing log spam.
#    daemon_reload&have_systemctl&(!bootstrap)::
#
#      "/$(file_names.systemd_app)"
#        args => "daemon-reload",
#        contain => basic_chroot($(root));

}
