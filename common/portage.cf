body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/config/directory_groups.cf",
              "cryptoo/config/directory_names.cf",
              "cryptoo/config/file_groups.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/config/templates.cf",
              "cryptoo/common/make_conf.cf",
              "cryptoo/util/link_from.cf",
              "cryptoo/util/perms.cf"
            };

}

bundle agent portage(root, role, arch, multilib)

{

  vars:

    portage_no_multilib::

      "portage_role"
        string => concat("@", "$(role)");

      "role_json"
        string => '{ "value": "$(this.portage_role)" }';

    portage_multilib::

      "portage_role"
        string => concat("@", "$(role)");

      "role_json"
        string => '{ "value": "$(this.portage_role)" }';

  classes:

    any::

      "portage_$(multilib)"
        expression => "any";

      "defined_role"
        not => strcmp("$(this.role)", "undefined");

  files:

    any::

      "$(root)$(directory_groups.common_pm)/."
        perms => portage,
        create => "true",
        comment => "Manage Portage-related system directories";

      "$(root)$(directory_groups.common_pm_open)/."
        perms => portage_open,
        create => "true",
        comment => "Manage Portage-related open directories";

      "$(root)$(directory_names.fs_config_pm_env)/$(file_groups.pm_env[$(role)]).conf"
        move_obstructions => "true",
        link_from => cryptoo_portage_env("$(file_groups.pm_env[$(role)]).conf"),
        comment => "Link all files in /etc/portage/env";

      "$(root)$(directory_names.fs_config_pm_environments)/$(file_groups.pm_environment[$(role)])"
        move_obstructions => "true",
        link_from => cryptoo_package_env("$(file_groups.pm_environment[$(role)])"),
        comment => "Link all files in /etc/portage/package.env";

      "$(root)$(directory_names.fs_config_pm_keywords)/$(file_groups.keywords[$(role)])"
        move_obstructions => "true",
        link_from => cryptoo_package_keyword("$(file_groups.keywords[$(role)])"),
        comment => "Link all files in /etc/portage/package.keywords";

      "$(root)$(directory_names.fs_config_pm_mask)/$(file_groups.mask[$(role)])"
        move_obstructions => "true",
        link_from => cryptoo_package_mask("$(file_groups.mask[$(role)])"),
        comment => "Link all files in /etc/portage/package.mask";

      "$(root)$(directory_names.fs_config_pm_unmask)/$(file_groups.unmask[$(role)])"
        move_obstructions => "true",
        link_from => cryptoo_package_unmask("$(file_groups.unmask[$(role)])"),
        comment => "Link all files in /etc/portage/package.unmask";

      "$(root)$(directory_names.fs_config_pm_use)/$(file_groups.use[$(role)])"
        move_obstructions => "true",
        link_from => cryptoo_package_use("$(file_groups.use[$(role)])"),
        comment => "Link all files in /etc/portage/package.use";

      "$(root)$(directory_names.fs_config_pm_use)/$(file_groups.unuse[$(role)])"
        delete => default:tidy,
        comment => "Unlink unneeded files in /etc/portage/package.use";

      "$(root)$(directory_names.fs_config_pm_profile)/$(file_groups.profile[$(role)])"
        move_obstructions => "true",
        link_from => cryptoo_portage_profile("$(file_groups.profile[$(role)])"),
        comment => "Link all files in /etc/portage/profile";

      "$(root)$(file_names.pm_profile)"
        move_obstructions => "true",
        link_from => cryptoo_profile("$(file_groups.make_profile[$(role)])");

      "$(root)$(file_names.pm_profile_upstream)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[profile_parent])";

      "$(root)$(file_names.pm_machine_meta)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[local_layout_conf])";

      "$(root)$(file_names.pm_machine_repo)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[local_repo_name])";

    defined_role::

      "$(root)$(file_names.pm_installed_sets)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[value])",
        template_method => "mustache",
        template_data => parsejson($(this.role_json));

  methods:

    any::

      "configure make.conf"
        usebundle => make_conf("$(root)", "$(role)", "$(multilib)");

}
