body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/common/gcc.cf",
              "cryptoo/guest/template/files.cf",
              "cryptoo/util/contain.cf",
              "cryptoo/util/edit_line.cf",
              "cryptoo/util/link_from.cf",
              "cryptoo/util/perms.cf"
            };

}

bundle agent cryptoo_filesystem(root, role, arch, multilib)

{

  vars:

    have_cpu2use_app::

      "cpu_flags" string => execresult("/$(file_names.cpu2use_app)","noshell");

    !have_cpu2use_app::

      "cpu_flags" string => "CPU_FLAGS_X86=\"\"";

  classes:

    any::

      "local_role_$(role)"
        expression => "any";

      "$(arch)"
        expression => "any";

      "$(multilib)" expression => "any";

      "have_cpu2use_app"
        expression => fileexists("/$(file_names.cpu2use_app)");

      "have_locale_gen"
        expression => fileexists("$(root)$(file_names.locale)");

      "bootstrap_systemd"
        not => fileexists("$(root)$(file_names.systemd_app)");

      "have_systemd"
        expression => fileexists("$(root)$(file_names.systemd_app)");

      "have_envupdate_app"
        expression => fileexists("$(root)$(file_names.envupdate_app)");

      "have_localegen_app"
        expression => fileexists("$(root)$(file_names.localegen_app)");

      "have_layman_conf"
        expression => fileexists("$(root)$(file_names.overlay_conf)");

    local_role_master|local_role_desktop|local_role_server::

      "local_role_host" expression => "any";

    local_role_desktop|local_role_server::

      "local_role_template" expression => "any";

  users:

    any::

      "guest"
        handle => "user_guest",
        policy => "present",
        home_dir => "/mnt/shared",
        uid => "405",
        group_primary => "users",
        shell => "/sbin/nologin";

  files:

    any::

      "$(root)/."
        perms => system,
        create => "true",
        handle => "$(root)";

      "$(root)$(directory_groups.common_system)/."
        perms => system,
        create => "true",
        handle => "$(root)$(directory_groups.common_system)";

      "$(root)$(directory_groups.common_system_restricted)/."
        perms => restricted,
        create => "true",
        handle => "$(root)$(directory_groups.common_system_restricted)";

      "$(root)$(directory_groups.common_system_private)/."
        perms => root,
        create => "true",
        handle => "$(root)$(directory_groups.common_system_private)";

      "$(root)$(directory_groups.common_open)/."
        perms => system_tmp,
        create => "true",
        handle => "$(root)$(directory_groups.common_open)";

      "$(root)$(directory_groups.common_pm)/."
        perms => portage,
        create => "true",
        handle => "$(root)$(directory_groups.common_pm)";

      "$(root)$(directory_groups.common_pm_open)/."
        perms => portage_open,
        create => "true",
        handle => "$(root)$(directory_groups.common_pm_open)";

      "$(root)$(directory_names.fs_mount_shared)/."
        depends_on => { "user_guest" },
        perms => guest,
        create => "true",
        handle => "$(root)$(directory_names.fs_mount_shared)";

      "$(root)$(file_names.mtab)"
        move_obstructions => "true",
        link_from => proc_mounts;

      "$(root)$(file_names.pm_config)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.make_conf)";

      "$(root)$(file_names.pm_profile)"
        move_obstructions => "true",
        link_from => cryptoo_profile("cryptoo");

      "$(root)$(file_names.pm_env_localdistfiles)"
        move_obstructions => "true",
        link_from => cryptoo_portage_env("local-distfiles.conf");

      "$(root)$(file_names.pm_env_nosandbox)"
        move_obstructions => "true",
        link_from => cryptoo_portage_env("nosandbox.conf");

      "$(root)$(file_names.pm_env_notmpfs)"
        move_obstructions => "true",
        link_from => cryptoo_portage_env("notmpfs.conf");

      "$(root)$(file_names.pm_environment_cryptoo)"
        move_obstructions => "true",
        link_from => cryptoo_package_env("cryptoo");

      "$(root)$(file_names.pm_keywords_basicprograms)"
        move_obstructions => "true",
        link_from => cryptoo_package_keyword("basic-programs");

      "$(root)$(file_names.pm_keywords_virtualization)"
        move_obstructions => "true",
        link_from => cryptoo_package_keyword("virtualization");

      "$(root)$(file_names.pm_mask_basicprograms)"
        move_obstructions => "true",
        link_from => cryptoo_package_mask("basic-programs");

      "$(root)$(file_names.pm_mask_problematic)"
        move_obstructions => "true",
        link_from => cryptoo_package_mask("problematic");

      "$(root)$(file_names.pm_use_basicprograms)"
        move_obstructions => "true",
        link_from => cryptoo_package_use("basic-programs");

      "$(root)$(file_names.pm_use_virtualization)"
        move_obstructions => "true",
        link_from => cryptoo_package_use("virtualization");

      "$(root)$(file_names.pm_profile_provided)"
        move_obstructions => "true",
        link_from => cryptoo_portage_profile("package.provided");

      "$(root)$(file_names.pm_profile_upstream)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.profile_parent)";

      "$(root)$(file_names.pm_machine_meta)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.local_layout_conf)";

      "$(root)$(file_names.pm_machine_repo)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.local_repo_name)";

      "$(root)$(directory_names.fs_standard_kernel)"
        move_obstructions => "true",
        link_from => kernel_dir;

      "$(root)$(file_names.pm_installed_sets)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.world_sets)";

      "$(root)$(file_names.localtime)"
        move_obstructions => "true",
        link_from => timezone("UTC");

      "$(root)$(file_names.system_bashrc)"
        perms => system,
        create => "false",
        ifvarclass => fileexists("$(root)$(file_names.system_bashrc)"),
        edit_line => bashrc;

      "$(root)$(file_names.system_bash_logout)"
        perms => system,
        create => "false",
        ifvarclass => fileexists("$(root)$(file_names.system_bash_logout)"),
        edit_line => default:uncomment_lines_containing("clear","#");

      "$(root)$(file_names.env_cryptoo)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.env_cryptoo)",
        classes => default:u_if_repaired("cryptoo:update_env");

      "$(root)$(file_names.env_locale)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.env_locale)",
        classes => default:u_if_repaired("cryptoo:update_env");

    have_locale_gen::

      "$(root)$(file_names.locale)"
        perms => system,
        create => "false",
        edit_line => default:uncomment_lines_containing("$(cryptoo:cryptoo.site_config[locale])","#"),
        classes => default:u_if_repaired("cryptoo:update_locale");

    bootstrap_systemd::

      "$(root)$(file_names.pm_use_systemd)"
        delete => default:tidy;

      "$(root)$(file_names.pm_use_udev)"
        move_obstructions => "true",
        link_from => cryptoo_package_use("udev");

      #"$(root)$(file_names.pm_use_systemdbootstrap)"
      #  move_obstructions => "true",
      #  link_from => cryptoo_package_use("systemd-bootstrap");

    have_systemd::

      "$(root)$(file_names.pm_use_systemd)"
        move_obstructions => "true",
        link_from => cryptoo_package_use("systemd");

      "$(root)$(file_names.pm_use_systemdbootstrap)"
        delete => default:tidy;

  methods:

    any::

      "configure gcc profile"
        usebundle => gcc("$(root)", "$(arch)");

    local_role_template::

      "manage template files"
        usebundle => template_files("$(root)", "$(role)");

  commands:

    update_locale&have_localegen_app::

      "/$(file_names.localegen_app)"
        contain => basic_chroot($(root));

    update_env&have_envupdate_app::

      "/$(file_names.envupdate_app)"
        contain => basic_chroot($(root));

}
