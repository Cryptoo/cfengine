body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/common/systemd.cf",
              "cryptoo/config/config.cf",
              "cryptoo/config/directory_names.cf",
              "cryptoo/config/templates.cf",
              "cryptoo/util/contain.cf",
              "cryptoo/util/perms.cf",
              "@(cryptoo:control.host_common_inputs)"
            };

}

bundle agent master(root)

{

  meta:

    "tags" slist => { "cryptoo_role" };

  vars:

    any::

      "arch"
        string => "x86_64";

      "export[/srv/nfs/site-local]"
        string => "*(sec=sys,secure,rw,async,nohide,crossmnt,no_subtree_check,no_root_squash,fsid=0)";

  classes:

    any::

      "need_master_ssh_key"
        not => fileexists("$(this.root)$(file_names.master_ssh_key)");

      "have_master_ssh_key"
        expression => fileexists("$(this.root)$(file_names.master_ssh_key)");

      "need_default_key"
        not => fileexists("$(this.root)$(file_names.default_key_public)");

      "have_default_key"
        expression => fileexists("$(this.root)$(file_names.default_key_public)");

      "need_mail_json"
        not => fileexists("$(this.root)$(file_names.mail_server_config)");

      "have_mail_json"
        expression => fileexists("$(this.root)$(file_names.mail_server_config)");

  files:

    any::

      "$(this.root)$(directory_names.storage_backup)/$(config.server_guests)/."
        perms => qemu,
        create => "true";

      "$(this.root)$(directory_names.storage_temp)/$(config.server_guests)/."
        perms => qemu,
        create => "true";

      "$(this.root)$(file_names.console_autologin)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[ini])",
        template_method => "mustache",
        template_data => mergedata("cryptoo:config.systemd_services[console_autologin]"),
        classes => daemon_reload("getty");

      "$(this.root)$(file_names.nfs_exports)"
        perms => system,
        create => "true",
        edit_line => default:set_line_based("cryptoo:master.export", " ", "\s*", ".*", "\s*#\s*"),
        classes => default:if_repaired("reload_exports");

    need_master_ssh_key&have_default_key::

      "$(this.root)$(file_names.master_ssh_key)"
        perms => system,
        copy_from => default:local_cp("/$(cryptoo:file_names.default_key_public)");

    need_mail_json::

      "$(this.root)$(file_names.mail_server_config)"
        perms => root,
        create => "true",
        edit_template => "/$(templates.template[mail_json])",
        classes => default:if_ok("have_mail_json");

    have_mail_json::

      "$(this.root)$(file_names.mail_server_json)"
        perms => root_qemu,
        copy_from => default:local_cp("/$(cryptoo:file_names.mail_server_config)");

  methods:

    any::

      "set up SSL PKI"
        usebundle => easy_rsa;

      "transfer certificates to guest inboxes"
        usebundle => ssl_certs;

      "transfer port info between guest boxes"
        usebundle => port_info;

      "transfer hidden service hostnames between guest boxes"
        usebundle => hidden_services;

      "transfer cjdns peer info to guest boxes"
        usebundle => cjdns_peers;

      "configure host kernel"
        usebundle => cryptoo:kconfig("host", "$(arch)"),
        classes => default:if_ok("kernel_ok");

      "manage guest inboxes and outboxes"
        usebundle => cryptoo:guest_boxes;

    have_master_ssh_key::

      "configure system as a host"
        usebundle => host("x86_64", "master");

  commands:

    need_default_key::

      "$(this.root)$(file_names.ssh_keygen_app)"
      args => "-t ed25519 -P \"\" -f /$(file_names.default_key)",
      comment => "Change the passphrase with ssh-keygen -p";

    reload_exports::

      "/$(file_names.exportfs_app)"
        args => "-arf";
}
