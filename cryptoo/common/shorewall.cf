body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/common/shorewall/hosts.cf",
              "cryptoo/common/shorewall/masq.cf",
              "cryptoo/common/shorewall/shorewall_zones.cf",
              "cryptoo/common/shorewall/policy.cf",
              "cryptoo/common/shorewall/rules.cf",
              "cryptoo/config/config.cf",
              "cryptoo/config/file_groups.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/config/network.cf",
              "cryptoo/util/classes.cf",
              "cryptoo/util/contain.cf"
            };

}

bundle agent shorewall(root, role)

{

  vars:

    any::

      "subnet_config"
        data => mergedata("cryptoo:network.subnet_config");

      "providers_json"
        string => '{"vpn_subnet": "$(subnet_config[vpndmz])", "isp_subnet": "$(subnet_config[ispdmz])"}';

      "rtrules_json"
        string => '{"lan_subnet": "$(subnet_config[lan])"}';

  classes:

    any::

      "bootstrap"
        not => strcmp("$(this.root)", "/");

      "have_shorewall_app"
        expression => fileexists("$(this.root)$(file_names.shorewall_app)");

      "have_shorewall_conf"
        expression => fileexists("$(this.root)$(file_names.shorewall_config)");

      "have_shorewall6_conf"
        expression => fileexists("$(this.root)$(file_names.shorewall6_config)");

      "shorewall_role_$(role)"
        expression => "any";

  files:

    have_shorewall_conf::

       "$(root)$(file_names.shorewall_config)"
        create => "false",
        edit_line => default:set_line_based("cryptoo:config.firewall[shorewall_conf]", "=", "\s+", ".*", "\s*#\s*"),
        classes => shorewall;

    have_shorewall6_conf::

       "$(root)$(file_names.shorewall6_config)"
        create => "false",
        edit_line => default:set_line_based("cryptoo:config.firewall[shorewall_conf]", "=", "\s+", ".*", "\s*#\s*"),
        classes => restart_if_repaired("shorewall6");

    shorewall_role_firewall_internal::

      "$(root)$(file_names.shorewall_providers)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[shorewall_providers])",
        template_method => "mustache",
        template_data => parsejson("$(providers_json)"),
        classes => shorewall;

      "$(root)$(file_names.shorewall_rtrules)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[shorewall_rtrules])",
        template_method => "mustache",
        template_data => parsejson("$(rtrules_json)"),
        classes => shorewall;

  methods:

    any::

      "configure /etc/shorewall/zones and /etc/shorewall/interfaces"
        usebundle => shorewall_zones("$(this.root)", "$(this.role)");

      "configure /etc/shorewall/hosts"
        usebundle => shorewall_hosts("$(this.root)", "$(this.role)");

      "configure /etc/shorewall/policy"
        usebundle => shorewall_policy("$(this.root)", "$(this.role)");

      "configure /etc/shorewall/masq"
        usebundle => shorewall_masq("$(this.root)", "$(this.role)");

      "configure /etc/shorewall/rules"
        usebundle => shorewall_rules("$(this.root)", "$(this.role)");

  commands:

    need_shorewall_restart&have_shorewall_app&(!bootstrap)::

      "/$(file_names.shorewall_app)"
        args => "restart",
        contain => silent;

}
