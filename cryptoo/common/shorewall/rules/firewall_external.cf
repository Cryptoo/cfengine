body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/config/config.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/config/network.cf",
              "cryptoo/config/site.cf",
              "cryptoo/config/templates.cf",
              "cryptoo/util/classes.cf",
              "cryptoo/util/perms.cf"
            };

}

bundle agent shorewall_rules_firewall_external(root)

{

  meta:

    "tags" slist => { "shorewall_rules", "firewall_external" };

  vars:

    any::

      "defined_numbers"
        data => mergedata("cryptoo:config.defined_numbers");

      "subnet_config"
        data => mergedata("cryptoo:network.subnet_config");

      "rules_json"
        string => '
          {
            "new":
              [
                {
                  "action": "guest"
                },
                {
                  "action": "portmapping",
                  "source": "idmz"
                },
                {
                  "action": "noip",
                  "source": "fw"
                },
                {
                  "action": "ACCEPT",
                  "source": "fw",
                  "destination": "net",
                  "protocol": "udp",
                  "destination_port": "-",
                  "source_port": "-",
                  "original_destination": "-",
                  "rate": "-",
                  "user": "root"
                },
                {
                  "action": "SSH(ACCEPT)",
                  "source": "fw",
                  "destination": "net"
                },
                {
                  "action": "HTTP(ACCEPT)",
                  "source": "fw",
                  "destination": "net"
                },
                {
                  "action": "HTTPS(ACCEPT)",
                  "source": "fw",
                  "destination": "net"
                },
                {
                  "action": "cjdns_in(ACCEPT)",
                  "source": "net",
                  "destination": "fw:192.168.$(subnet_config[ispdmz]).$(defined_numbers[firewall_external])"
                },
                {
                  "action": "i2p_in(DNAT)",
                  "source": "net",
                  "destination": "idmz:192.168.$(subnet_config[ispdmz]).$(defined_numbers[i2p])"
                },
                {
                  "action": "freenet_in(DNAT)",
                  "source": "net",
                  "destination": "idmz:192.168.$(subnet_config[ispdmz]).$(defined_numbers[freenet])"
                },
                {
                  "action": "bitmessage(DNAT)",
                  "source": "net",
                  "destination": "idmz:192.168.$(subnet_config[ispdmz]).$(defined_numbers[bitmessage])"
                },
                {
                  "action": "bitcoin(DNAT)",
                  "source": "net",
                  "destination": "idmz:192.168.$(subnet_config[ispdmz]).$(defined_numbers[bitcoin])"
                },
                {
                  "action": "bitcoin_testnet(DNAT)",
                  "source": "net",
                  "destination": "idmz:192.168.$(subnet_config[ispdmz]).$(defined_numbers[bitcoin_testnet])"
                },
                {
                  "action": "vpn_server(DNAT)",
                  "source": "net",
                  "destination": "idmz:192.168.$(subnet_config[ispdmz]).$(defined_numbers[vpn_server])"
                },
                {
                  "action": "DNAT",
                  "source": "net",
                  "destination": "lan:192.168.$(subnet_config[lan]).$(defined_numbers[master]):22",
                  "protocol": "tcp",
                  "destination_port": "$(site.config[firewall][external_ssh])",
                },
                {
                  "action": "ACCEPT",
                  "source": "lan:192.168.$(subnet_config[lan]).224/27",
                  "destination": "net"
                }
              ]
          }';

  files:

    any::

      "$(root)$(file_names.shorewall_rules)"
        perms => system,
        create => "true",
        edit_template => "/$(templates.template[shorewall_rules])",
        template_method => "mustache",
        template_data => parsejson("$(rules_json)"),
        classes => shorewall;

}
