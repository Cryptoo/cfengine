body file control

{

  namespace => "cryptoo";

  inputs => {
              "cryptoo/config/directory_names.cf",
              "cryptoo/config/file_names.cf",
              "cryptoo/util/edit_line.cf",
              "cryptoo/util/perms.cf"
            };

}

bundle agent kconfig(target, arch)

{

  vars:

    any::

      "kconfig_target"
        slist => variablesmatching(".*config\.kconfig\[.*]", "$(target)");

      "kconfig_enabled"
        slist => variablesmatching(".*config\.kconfig\[.*]", "enabled");

      "kconfig_disabled"
        slist => variablesmatching(".*config\.kconfig\[.*]", "disabled");

      "kconfig_target_enabled"
        slist => intersection(kconfig_target, kconfig_enabled);

      "kconfig_target_disabled"
        slist => intersection(kconfig_target, kconfig_disabled);

      "kconfig_target_enabled_array[$($(kconfig_target_enabled))]"
        string => "$($(kconfig_target_enabled))";

      "kconfig_target_disabled_array[$($(kconfig_target_disabled))]"
        string => "$($(kconfig_target_disabled))";

      "kconfig_target_enabled_symbols"
        slist => getindices(kconfig_target_enabled_array);

      "kconfig_target_disabled_symbols"
        slist => getindices(kconfig_target_disabled_array);

      "kconfig_file"
        string => "/$(cryptoo:directory_names.fs_volatile_kernel)/$(target)/$(arch)/.config";

#      FIXME: This is the real command. It is tested and works, but it's too slow to use during development
#      "kernel_clone_command"
#        string => "/$(cryptoo:file_names.git_app) clone $(cryptoo:cryptoo.kernel_git) /$(cryptoo:directory_names.fs_storage_kernel)";

#      FIXME: Cloning from virtfs is much faster than cloning over the 'net
      "kernel_clone_command"
        string => "/usr/bin/rsync -a --exclude .git /usr/src/linux-host/ /$(cryptoo:directory_names.fs_storage_kernel)";

  classes:

    any::

      "$(target)"
        expression => "any";

      "have_cryptoo"
        expression => fileexists("/$(cryptoo:file_names.cryptoo_profile)");

      "have_kernel_src"
        expression => fileexists("/$(cryptoo:file_names.kernel_makefile)");

      "need_kernel_src"
        not => fileexists("/$(cryptoo:file_names.kernel_makefile)");

      "have_target_kconfig"
        expression => fileexists("$(kconfig_file)");

      "need_target_kconfig"
        not => fileexists("$(kconfig_file)");

      "need_target_kconfig_bootstrap"
        and => { have_cryptoo, have_kernel_src, need_target_kconfig };

      "target_kconfig_disabled_$(kconfig_target_enabled_symbols)"
        expression => regline("# CONFIG_$(kconfig_target_enabled_symbols) is not set", "$(kconfig_file)");

      "target_kconfig_disabled_$(kconfig_target_disabled_symbols)"
        expression => regline("# CONFIG_$(kconfig_target_disabled_symbols) is not set", "$(kconfig_file)");

      "target_kconfig_enabled_$(kconfig_target_disabled_symbols)"
        expression => regline("CONFIG_$(kconfig_target_disabled_symbols)=y", "$(kconfig_file)");

      "target_kconfig_enabled_$(kconfig_target_enabled_symbols)"
        expression => regline("CONFIG_$(kconfig_target_enabled_symbols)=y", "$(kconfig_file)");

  files:

    have_target_kconfig::

      "$(kconfig_file)"
        ifvarclass => "target_kconfig_disabled_$(kconfig_target_enabled_symbols)",
        perms => cryptoo:system,
        create => "false",
        edit_line => enable_kconfig("$(kconfig_target_enabled_symbols)","$(kconfig_file)"),
        classes => default:u_if_repaired("target_kconfig_changed"),
        comment => "repair symbols that should be enabled, but are in the disabled state";

      "$(kconfig_file)"
        ifvarclass => "!target_kconfig_enabled_$(kconfig_target_enabled_symbols)",
        perms => cryptoo:system,
        create => "false",
        edit_line => enable_kconfig("$(kconfig_target_enabled_symbols)","$(kconfig_file)"),
        classes => default:u_if_repaired("target_kconfig_changed"),
        comment => "repair symbols that should be enabled, but are missing";

      "$(kconfig_file)"
        ifvarclass => "target_kconfig_enabled_$(kconfig_target_disabled_symbols)",
        perms => cryptoo:system,
        create => "false",
        edit_line => disable_kconfig("$(kconfig_target_disabled_symbols)","$(kconfig_file)"),
        classes => default:u_if_repaired("target_kconfig_changed"),
        comment => "repair symbols that should be disabled, but are in the enabled state";

      "$(kconfig_file)"
        ifvarclass => "!target_kconfig_disabled_$(kconfig_target_disabled_symbols)",
        perms => cryptoo:system,
        create => "false",
        edit_line => disable_kconfig("$(kconfig_target_disabled_symbols)","$(kconfig_file)"),
        classes => default:u_if_repaired("target_kconfig_changed"),
        comment => "repair symbols that should be disabled, but are missing";

  host&have_target_kconfig::

      "$(kconfig_file)"
        edit_line => default:set_quoted_values("kconfig.kconfig_string_host"),
        classes => default:u_if_repaired("target_kconfig_changed"),
        comment => "set kconfig strings";

  commands:

    need_kernel_src::
      "$(kernel_clone_command)";

    need_target_kconfig_bootstrap::
      "/usr/cryptoo/bin/kmake_$(target) allnoconfig";

    target_kconfig_changed::
      "/usr/cryptoo/bin/kmake_$(target) olddefconfig";

}
