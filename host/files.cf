bundle agent host_files (arch)

{

  vars:

    any::

      "root_dev" string => "/dev/mapper/$(cryptoo.machine_names[$(cryptoo.machine_number)])-root";
      "root_uuid" string => execresult("/$(file_names.blkid_app) -s UUID -o value $(root_dev)","noshell");
      "hostname[hostname]" string => "$(cryptoo.machine_names[$(cryptoo.machine_number)])";

  classes:

    any::

      "$(arch)" expression => "any";
      "$(multilib)" expression => "any";
      "root_bind_mount" expression => regline("device /dev/mapper/$(cryptoo.machine_names[$(cryptoo.machine_number)])-storage mounted on /$(directory_names.fs_mount_root).*", "$(file_names.mount_info)");
      "srv_portage_local_exists" expression => fileexists("/$(directory_names.fs_storage_pm_site)");
      "need_cryptoo" not => "have_cryptoo";
      "cryptoo_bind_mount" expression => regline("device /dev/mapper/$(cryptoo.machine_names[$(cryptoo.machine_number)])-storage mounted on /$(directory_names.fs_cryptoo).*", "$(file_names.mount_info)");
      "srv_cryptoo_exists" expression => fileexists("/$(directory_names.fs_storage_cryptoo)");
      "have_dracut" expression => fileexists("/$(file_names.dracut_app)");
      "need_dracut_image" not => fileexists("/$(file_names.dracut_image)");
      "have_crypttab" expression => fileexists("/$(file_names.crypttab)");
      "need_crypttab" not => fileexists("/$(file_names.crypttab)");
      "srv_src_exists" expression => fileexists("/$(directory_names.fs_storage_sources)");

    any::

      "storage_mounted" expression => regline("device /dev/mapper/$(cryptoo.machine_names[$(cryptoo.machine_number)])-storage mounted on /$(directory_names.fs_storage_base).*", "$(file_names.mount_info)");

  files:

    any::

      "/$(file_names.grub_defaults)"
        perms => system,
        create => "false",
        edit_line => delete_lines_matching("# GRUB_CMDLINE_LINUX=.*");

      "/$(file_names.grub_defaults)"
        perms => system,
        create => "false",
        edit_line => set_quoted_values("config.grub");

      "/$(file_names.env_kernel)"
        perms => system,
        create => "true",
        edit_template => "/$(file_names.template_env_kernel)",
        classes => u_if_repaired("update_env");

      "/$(file_names.dracut_conf)"
        perms => system,
        create => "true",
        edit_template => "/$(file_names.template_dracut_conf)",
        classes => u_if_repaired("update_dracut");

      "/$(file_names.pm_use_host)"
        move_obstructions => "true",
        link_from => cryptoo_package_use("host");

    machine_name_available::

      "/$(file_names.fstab)"
        perms => system,
        create => "true",
        edit_template => "/$(file_names.template_fstab)",
        classes => u_if_repaired("fstab_repaired");

    root_bind_mount::

      "/$(file_names.dmcrypt_key)"
        perms => root,
        create => "false";

      "/$(directory_names.fs_mount_root)/$(file_names.dmcrypt_key)"
        perms => root,
        copy_from => local_cp("/$(file_names.dmcrypt_key)");

    srv_portage_local_exists::

      "/$(file_names.storage_pm_site_meta)"
        perms => system,
        create => "true",
        edit_template => "/$(file_names.template_local_layout_conf)";

      "/$(file_names.storage_pm_site_repo)"
        perms => system,
        create => "true",
        edit_template => "/$(file_names.template_site_repo_name)";

    need_machine_names::

      "/$(file_names.machine_names)"
        perms => system,
        create => "true",
        edit_template => "/$(file_names.template_machine_names)",
        classes => u_if_repaired("machine_name_available");

    need_site_config::

      "/$(file_names.site_config)"
        perms => system,
        create => "true",
        edit_template => "/$(file_names.template_site_config)",
        classes => u_if_repaired("site_config_available");

  commands:

    update_env::

      "/$(file_names.envupdate_app)";

    cryptoo_bind_mount&need_cryptoo&srv_cryptoo_exists::

      "/$(file_names.git_app) clone -b dev $(cryptoo.overlay_git) /$(directory_names.fs_storage_cryptoo)";

    have_dracut&have_crypttab&(need_dracut_image|update_dracut)::

      "/$(file_names.dracut_app) --force --no-compress /$(file_names.dracut_image)";

  methods:

    any::

      "configure OpenRC"
        usebundle => openrc("/");

      "manage files for the server skeleton"
        usebundle => common_files("/$(directory_names.fs_volatile_images)/server/x86_64/no-multilib/","server","x86_64","nomultilib");

      "manage files for the desktop skeleton"
        usebundle => common_files("/$(directory_names.fs_volatile_images)/desktop/x86_64/no-multilib/","desktop","x86_64","nomultilib");

      "manage files for the desktop-multilib skeleton"
        usebundle => common_files("/$(directory_names.fs_volatile_images)/desktop/x86_64/multilib/","desktop","x86_64","multilib");

    need_crypttab::

      "build crypttab"
        usebundle => crypttab;

    srv_src_exists::

      "build kernel configs"
        usebundle => kconfig("host", "$(arch)");

    fstab_repaired::

      "activate all mountpoints"
        usebundle => mount_all;

}
