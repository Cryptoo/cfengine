bundle agent files (root, role, arch, multilib)

{

  vars:

    any::

    role_master&local_role_master::

      "root_dev" string => "/dev/mapper/$(cryptoo.machine_names[$(cryptoo.machine_number)])-root";
      "root_uuid" string => execresult("/$(file_names.blkid_app) -s UUID -o value $(root_dev)","noshell");

    bootable::

      "hostname[hostname]" string => "$(cryptoo.machine_names[$(cryptoo.machine_number)])";

    have_cpu2use::

      "cpu_flags" string => execresult("/$(file_names.cpu2use_app)","noshell");

  classes:

    any::

      "need_cryptoo" not => "have_cryptoo";
      "local_role_$(role)" expression => "any";
      "$(arch)" expression => "any";
      "$(multilib)" expression => "any";
      "have_systemd" expression => fileexists("$(root)$(file_names.systemd_app)");
      "bootstrap_systemd" not => fileexists("$(root)$(file_names.systemd_app)");
      "have_locale_gen" expression => fileexists("$(root)$(file_names.locale)");
      "have_dracut" expression => fileexists("$(root)$(file_names.dracut_app)");
      "need_dracut_image" not => fileexists("$(root)$(file_names.dracut_image)");
      "have_crypttab" expression => fileexists("$(root)$(file_names.crypttab)");
      "need_crypttab" not => fileexists("$(root)$(file_names.crypttab)");
      "storage_mounted" expression => regline("device /dev/mapper/$(cryptoo.machine_names[$(cryptoo.machine_number)])-storage mounted on /$(directory_names.fs_storage_base).*", "$(file_names.mount_info)");
      "need_machine_names" not => fileexists("/$(file_names.machine_names)");
      "have_cpu2use" expression => fileexists("/$(file_names.cpu2use_app)");

    role_master&local_role_master::

      "bootable" expression => "any";
      "cryptoo_bind_mount" expression => regline("device /dev/mapper/$(cryptoo.machine_names[$(cryptoo.machine_number)])-storage mounted on /$(directory_names.fs_cryptoo).*", "$(file_names.mount_info)");
      "root_bind_mount" expression => regline("device /dev/mapper/$(cryptoo.machine_names[$(cryptoo.machine_number)])-storage mounted on /$(directory_names.fs_mount_root).*", "$(file_names.mount_info)");
      "srv_portage_local_exists" expression => fileexists("/$(directory_names.fs_storage_pm_site)");
      "srv_cryptoo_exists" expression => fileexists("/$(directory_names.fs_storage_cryptoo)");
      "srv_src_exists" expression => fileexists("/$(directory_names.fs_storage_sources)");

  files:

    any::

      "$(root)$(file_names.mtab)"
        move_obstructions => "true",
        link_from => proc_mounts;

      "$(root)$(file_names.pm_config)"
        perms => system,
        create => "true",
        edit_template => "/var/cfengine/inputs/templates/cryptoo_make_conf.txt";

      "$(root)$(file_names.pm_profile)"
        move_obstructions => "true",
        link_from => cryptoo_profile("cryptoo");

      "$(root)$(file_names.pm_env_localdistfiles)"
        move_obstructions => "true",
        link_from => cryptoo_portage_env("local-distfiles.conf");

      "$(root)$(file_names.pm_env_nosandbox)"
        move_obstructions => "true",
        link_from => cryptoo_portage_env("nosandbox.conf");

      "$(root)$(file_names.pm_env_notmpfs)"
        move_obstructions => "true",
        link_from => cryptoo_portage_env("notmpfs.conf");

      "$(root)$(file_names.pm_environment_cryptoo)"
        move_obstructions => "true",
        link_from => cryptoo_package_env("cryptoo");

      "$(root)$(file_names.pm_keywords_basicprograms)"
        move_obstructions => "true",
        link_from => cryptoo_package_keyword("basic-programs");

      "$(root)$(file_names.pm_keywords_virtualization)"
        move_obstructions => "true",
        link_from => cryptoo_package_keyword("virtualization");

      "$(root)$(file_names.pm_mask_basicprograms)"
        move_obstructions => "true",
        link_from => cryptoo_package_mask("basic-programs");

      "$(root)$(file_names.pm_use_basicprograms)"
        move_obstructions => "true",
        link_from => cryptoo_package_use("basic-programs");

      "$(root)$(file_names.pm_use_virtualization)"
        move_obstructions => "true",
        link_from => cryptoo_package_use("virtualization");

      "$(root)$(file_names.pm_profile_provided)"
        move_obstructions => "true",
        link_from => cryptoo_portage_profile("package.provided");

      "$(root)$(file_names.pm_profile_upstream)"
        perms => system,
        create => "true",
        edit_template => "/var/cfengine/inputs/templates/cryptoo_profile_parent.txt";

      "$(root)$(file_names.pm_machine_meta)"
        perms => system,
        create => "true",
        edit_template => "/var/cfengine/inputs/templates/cryptoo_local_layout_conf.txt";

      "$(root)$(file_names.pm_machine_repo)"
        perms => system,
        create => "true",
        edit_template => "/var/cfengine/inputs/templates/cryptoo_local_repo_name.txt";

      "$(root)$(directory_names.fs_standard_kernel)"
        move_obstructions => "true",
        link_from => kernel_dir;

      "$(root)$(file_names.pm_installed_sets)"
        perms => system,
        create => "true",
        edit_template => "/var/cfengine/inputs/templates/cryptoo_world_sets.txt";

    have_locale_gen::

      "$(root)$(file_names.locale)"
        perms => system,
        create => "false",
        edit_line => uncomment_lines_containing("en_US\.UTF-8 UTF-8","#"),
        classes => u_if_repaired("update_locale");

    bootstrap_systemd::

      "$(root)$(file_names.pm_use_systemd)"
        delete => tidy;

      "$(root)$(file_names.pm_use_udev)"
        move_obstructions => "true",
        link_from => cryptoo_package_use("udev");

      #"$(root)$(file_names.pm_use_systemdbootstrap)"
      #  move_obstructions => "true",
      #  link_from => cryptoo_package_use("systemd-bootstrap");

    have_systemd::

      "$(root)$(file_names.pm_use_systemd)"
        move_obstructions => "true",
        link_from => cryptoo_package_use("systemd");

      "$(root)$(file_names.pm_use_systemdbootstrap)"
        delete => tidy;

    bootable::

      "$(root)$(file_names.grub_defaults)"
        perms => system,
        create => "false",
        edit_line => delete_lines_matching("# GRUB_CMDLINE_LINUX=.*");

      "$(root)$(file_names.grub_defaults)"
        perms => system,
        create => "false",
        edit_line => set_quoted_values("config.grub");

      "$(root)$(file_names.localtime)"
        move_obstructions => "true",
        link_from => timezone("UTC");

      "$(root)$(file_names.system_bashrc)"
        perms => system,
        create => "true",
        edit_line => bashrc;

      "$(root)$(file_names.system_bash_logout)"
        perms => system,
        create => "false",
        edit_line => uncomment_lines_containing("clear","#");

      "$(root)$(file_names.env_cryptoo)"
        perms => system,
        create => "true",
        edit_template => "/var/cfengine/inputs/templates/cryptoo_env.txt",
        classes => u_if_repaired("update_env");

      "$(root)$(file_names.env_locale)"
        perms => system,
        create => "true",
        edit_template => "/var/cfengine/inputs/templates/cryptoo_env_locale.txt",
        classes => u_if_repaired("update_env");

      "$(root)$(file_names.env_kernel)"
        perms => system,
        create => "true",
        edit_template => "/var/cfengine/inputs/templates/cryptoo_env_kernel.txt",
        classes => u_if_repaired("update_env");

    bootable&machine_name_available::

      "$(root)$(file_names.fstab)"
        perms => system,
        create => "true",
        edit_template => "/var/cfengine/inputs/templates/cryptoo_fstab.txt";

    local_role_master::

      "$(root)$(file_names.dracut_conf)"
        perms => system,
        create => "true",
        edit_template => "/var/cfengine/inputs/templates/cryptoo_dracut_conf.txt",
        classes => u_if_repaired("update_dracut");

      "$(root)$(file_names.pm_use_host)"
        move_obstructions => "true",
        link_from => cryptoo_package_use("host");

    root_bind_mount::

      "$(root)$(file_names.dmcrypt_key)"
        perms => root,
        create => "false";

      "$(root)$(directory_names.fs_mount_root)/$(file_names.dmcrypt_key)"
        perms => root,
        copy_from => local_cp("$(root)$(file_names.dmcrypt_key)");

    local_role_master&srv_portage_local_exists::

      "$(root)$(file_names.storage_pm_site_meta)"
        perms => system,
        create => "true",
        edit_template => "/var/cfengine/inputs/templates/cryptoo_local_layout_conf.txt";

      "$(root)$(file_names.storage_pm_site_repo)"
        perms => system,
        create => "true",
        edit_template => "/var/cfengine/inputs/templates/cryptoo_site_local_repo_name.txt";

    local_role_master&need_machine_names::

      "$(root)$(file_names.machine_names)"
        perms => system,
        create => "true",
        edit_template => "/var/cfengine/inputs/templates/cryptoo_machine_names_json.txt";

    local_role_master&need_site_config::

      "$(root)$(file_names.site_config)"
        perms => system,
        create => "true",
        edit_template => "/var/cfengine/inputs/templates/cryptoo_site_config_json.txt";

  commands:

    bootable&update_locale::

      "$(root)$(file_names.localegen_app)";

    bootable&update_env::

      "$(root)$(file_names.envupdate_app)";

    cryptoo_bind_mount&need_cryptoo&srv_cryptoo_exists::

      "$(root)$(file_names.git_app) clone -b dev $(cryptoo.overlay_git) $(root)$(directory_names.fs_storage_cryptoo)";

    local_role_master&have_dracut&have_crypttab&(need_dracut_image|update_dracut)::

      "$(root)$(file_names.dracut_app) --force --no-compress $(root)$(file_names.dracut_image)";

  methods:

    local_role_master&need_crypttab::

      "build crypttab"
        usebundle => crypttab;

    local_role_master&srv_src_exists::

      "build kernel configs"
        usebundle => kconfig("host");

    local_role_master::

      "configure OpenRC"
        usebundle => openrc("$(root)");

}
